{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","version","ax5uploader","cfg","this","instanceId","getGuid","config","clickEventName","theme","lang","upload","abort","accept","multiple","manualUpload","defaultBtns","label","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","selectedFiles","openProgressBox","call","bindEvent","off","on","trigger","bind","$progressBox","console","log","alignLayout","alignProgressBox","append","_alignProgressBox","$window","jQuery","window","$body","document","body","pos","positionMargin","dim","pickerDim","pickerDirection","parent","get","position","offset","width","outerWidth","height","outerHeight","winWidth","Math","max","winHeight","direction","top","positionCSS","css","left","$progressBoxArrow","viewport","selector","setTimeout","init","_config","extend","dropZone","data","isObject","error","parseJson","attr","find","length","getError","tmpl","btns","main","uploader_instance","push","arguments","setConfig","apply","uploader","uploadProgress","columnKeys","inputFile","inputFileForm","progressBox","tmplName","mustache","render"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                lang: {\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                accept: \"*/*\",\n                multiple: false,\n                manualUpload: false\n            };\n            this.defaultBtns = {\n                \"upload\": { label: this.config.lang[\"upload\"], theme: \"btn-primary\" },\n                \"abort\": { label: this.config.lang[\"abort\"], theme: this.config.theme }\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            var onSelectFile = function onSelectFile(_evt) {\n                var files = void 0;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                this.selectedFiles = files;\n\n                openProgressBox.call(this);\n            };\n\n            var upload = function upload() {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({ display: \"block\" });\n                progress_bar.css({ width: '0%' });\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                } else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({ width: U.number(e.loaded / e.total * 100, { round: 2 }) + '%' });\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({ display: \"none\" });\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData); // multipart/form-data\n            };\n\n            var bindEvent = function bindEvent() {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    onSelectFile.call(this, _evt);\n                }.bind(this));\n\n                this.$progressBox.off(\"click.ax5uploader\").on(\"click.ax5uploader\", \"button\", function (_evt) {\n                    console.log(\"click btn\");\n                }.bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            var alignLayout = function alignLayout() {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            var alignProgressBox = function alignProgressBox(append) {\n                var _alignProgressBox = function _alignProgressBox() {\n                    var $window = jQuery(window),\n                        $body = jQuery(document.body);\n                    var pos = {},\n                        positionMargin = 6,\n                        dim = {},\n                        pickerDim = {},\n                        pickerDirection = void 0;\n\n                    // cfg.viewport.selector\n\n                    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox.addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    var positionCSS = function () {\n                        var css = { left: 0, top: 0 };\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    }();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox.css(positionCSS);\n                };\n\n                this.$progressBox.css({ top: -999 });\n                if (append) {\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n                }\n                setTimeout(function () {\n                    _alignProgressBox.call(this);\n                }.bind(this));\n            };\n\n            var openProgressBox = function openProgressBox() {\n                alignProgressBox.call(this, \"append\");\n                if (cfg.manualUpload) {} else {\n                    // 자동 업로드 이면.\n                }\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    var progressBox = function progressBox(columnKeys) {\n        return \"\\n<div data-ax5uploader-progressbox=\\\"{{instanceId}}\\\" class=\\\"{{theme}}\\\">\\n    <div class=\\\"ax-progressbox-body\\\">\\n        <div class=\\\"ax-pregressbox-content\\\">\\n            <div class=\\\"progress\\\">\\n              <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" style=\\\"width: 0\\\">\\n                <span class=\\\"sr-only\\\">0% Complete</span>\\n              </div>\\n            </div>\\n        </div>\\n        {{#btns}}\\n            <div class=\\\"ax-progressbox-buttons\\\">\\n            {{#btns}}\\n                {{#@each}}\\n                <button data-pregressbox-btn=\\\"{{@key}}\\\" class=\\\"btn btn-default {{@value.theme}}\\\">{{@value.label}}</button>\\n                {{/@each}}\\n            {{/btns}}\\n            </div>\\n        {{/btns}}\\n    </div>\\n    <div class=\\\"ax-progressbox-arrow\\\"></div>\\n</div>\\n\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                lang: {\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                accept: \"*/*\",\n                multiple: false,\n                manualUpload: false\n            };\n            this.defaultBtns = {\n                \"upload\": {label: this.config.lang[\"upload\"], theme: \"btn-primary\"},\n                \"abort\": {label: this.config.lang[\"abort\"], theme: this.config.theme}\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            let onSelectFile = function (_evt) {\n                let files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                this.selectedFiles = files;\n\n                openProgressBox.call(this);\n            };\n\n            let upload = function () {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({display: \"block\"});\n                progress_bar.css({width: '0%'});\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                }\n                else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({width: U.number((e.loaded / e.total) * 100, {round: 2}) + '%'});\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({display: \"none\"});\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData);  // multipart/form-data\n            };\n\n            let bindEvent = function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        onSelectFile.call(this, _evt);\n                    }).bind(this));\n\n                this.$progressBox\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", \"button\", (function (_evt) {\n                        console.log(\"click btn\");\n                    }).bind(this));\n                \n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            let alignLayout = function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            let alignProgressBox = function (append) {\n                let _alignProgressBox = function () {\n                    let $window = jQuery(window), $body = jQuery(document.body);\n                    let pos = {}, positionMargin = 6,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    // cfg.viewport.selector\n\n                    pos = (this.$progressBox.parent().get(0) == this.$target.get(0)) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    let positionCSS = (function () {\n                        let css = {left: 0, top: 0};\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    })();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox\n                        .css(positionCSS);\n                };\n\n                this.$progressBox.css({top: -999});\n                if (append) {\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n                }\n                setTimeout((function () {\n                    _alignProgressBox.call(this);\n                }).bind(this));\n            };\n\n            let openProgressBox = function () {\n                alignProgressBox.call(this, \"append\");\n                if (cfg.manualUpload) {\n\n                } else {\n                    // 자동 업로드 이면.\n                }\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function(columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    let progressBox = function (columnKeys) {\n        return `\n<div data-ax5uploader-progressbox=\"{{instanceId}}\" class=\"{{theme}}\">\n    <div class=\"ax-progressbox-body\">\n        <div class=\"ax-pregressbox-content\">\n            <div class=\"progress\">\n              <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" style=\"width: 0\">\n                <span class=\"sr-only\">0% Complete</span>\n              </div>\n            </div>\n        </div>\n        {{#btns}}\n            <div class=\"ax-progressbox-buttons\">\n            {{#btns}}\n                {{#@each}}\n                <button data-pregressbox-btn=\"{{@key}}\" class=\"btn btn-default {{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        {{/btns}}\n    </div>\n    <div class=\"ax-progressbox-arrow\"></div>\n</div>\n`;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}