{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5uploader","cfg","this","instanceId","getGuid","config","clickEventName","theme","file_types","queue","target","selectedFile","uploadedFile","init","$","call","__request_select_file","before_select_file","window","imagePicker","getPictures","results","i","length","console","log","_this","__on_select_file","error","els","trigger","__old_select_file","evt","file","target_id","id","preview","get","dataTransfer","files","selected_file","root","setcss_preview","img","box_width","box_height","css","image","Image","src","onload","width","height","left","top","display","reader","FileReader","onloadend","result","ex","readAsDataURL","on_event","that","action","__old_upload","info","get_error","formData","FormData","progress_bar","append","upload_http","filename_param_key","k","data","xhr","XMLHttpRequest","open","method","url","e","res","response","parseJson","upload_complete","upload","onprogress","number","loaded","total","round","lengthComputable","setTimeout","send","main","uploader_instance","push","arguments","isObject","setConfig","apply","UPLOADER","uploader","uploadProgress","columnKeys","tmpl","tmplName","mustache","render","TOAST"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            var self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                file_types: \"*/*\"\n            };\n            this.queue = [];\n            this.target = null;\n            this.selectedFile = null;\n            this.uploadedFile = null;\n\n            cfg = this.config;\n\n            this.init = function () {\n\n                this.target = $(cfg.target);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            this.__request_select_file = function () {\n                if (cfg.before_select_file) {\n                    if (!cfg.before_select_file.call()) {\n                        return false; // 중지\n                    }\n                }\n\n                if (window.imagePicker) {\n                    window.imagePicker.getPictures(function (results) {\n                        for (var i = 0; i < results.length; i++) {\n                            console.log('Image URI: ' + results[i]);\n                        }\n                        _this.__on_select_file(results);\n                    }, function (error) {\n                        console.log('Error: ' + error);\n                    });\n                } else {\n                    this.els[\"input-file\"].trigger(\"click\");\n                }\n            };\n\n            this.__old_select_file = function (evt) {\n                var file,\n                    target_id = this.target.id,\n                    preview = this.els[\"preview-img\"].get(0);\n\n                if ('dataTransfer' in evt) {\n                    file = evt.dataTransfer.files[0];\n                } else if ('target' in evt) {\n                    file = evt.target.files[0];\n                } else if (evt) {\n                    file = evt[0];\n                }\n\n                if (!file) return false;\n                // todo : size over check\n\n                this.selected_file = file;\n                // 선택된 이미지 프리뷰 기능\n                (function (root) {\n                    root.els[\"preview-img\"].css({ display: \"block\" });\n\n                    function setcss_preview(img, box_width, box_height) {\n                        var css = {};\n\n                        var image = new Image();\n                        image.src = img.src;\n                        image.onload = function () {\n                            // access image size here\n                            //console.log(this.width, this.height);\n                            if (this.width > this.height) {\n                                // 가로형\n                                if (this.height > box_height) {\n                                    css = {\n                                        width: this.width * (box_height / this.height), height: box_height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                } else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                            } else {\n                                // 세로형\n                                if (this.width > box_width) {\n                                    css = {\n                                        height: this.height * (box_width / this.width), width: box_width\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                } else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                            }\n                            console.log(css);\n                            root.els[\"preview-img\"].css(css);\n                        };\n                    }\n\n                    if (window.imagePicker) {\n                        preview.src = file;\n                        setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                    } else {\n                        var reader = new FileReader(target_id);\n                        reader.onloadend = function () {\n                            try {\n                                preview.src = reader.result;\n                                setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                            } catch (ex) {\n                                console.log(ex);\n                            }\n                        };\n                        if (file) {\n                            reader.readAsDataURL(file);\n                        }\n                    }\n                })(this);\n\n                if (cfg.on_event) {\n                    var that = {\n                        action: \"fileselect\",\n                        file: file\n                    };\n                    cfg.on_event.call(that, that);\n                }\n\n                /// 파일 선택하면 업로드\n                // if(file) this.upload(file);\n            };\n\n            this.__old_upload = function () {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({ display: \"block\" });\n                progress_bar.css({ width: '0%' });\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                } else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({ width: U.number(e.loaded / e.total * 100, { round: 2 }) + '%' });\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({ display: \"none\" });\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData); // multipart/form-data\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n})();\n\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(TOAST.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        var ax5uploader = function () {\n            var\n                self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                file_types: \"*/*\"\n            };\n            this.queue = [];\n            this.target = null;\n            this.selectedFile = null;\n            this.uploadedFile = null;\n\n            cfg = this.config;\n\n            this.init = function () {\n\n                this.target = $(cfg.target);\n\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            this.__request_select_file = function () {\n                if (cfg.before_select_file) {\n                    if (!cfg.before_select_file.call()) {\n                        return false; // 중지\n                    }\n                }\n\n                if (window.imagePicker) {\n                    window.imagePicker.getPictures(\n                        function (results) {\n                            for (var i = 0; i < results.length; i++) {\n                                console.log('Image URI: ' + results[i]);\n                            }\n                            _this.__on_select_file(results);\n                        }, function (error) {\n                            console.log('Error: ' + error);\n                        }\n                    );\n                } else {\n                    this.els[\"input-file\"].trigger(\"click\");\n                }\n            };\n\n            this.__old_select_file = function (evt) {\n                var file,\n                    target_id = this.target.id,\n                    preview = this.els[\"preview-img\"].get(0);\n\n                if ('dataTransfer' in evt) {\n                    file = evt.dataTransfer.files[0];\n                }\n                else if ('target' in evt) {\n                    file = evt.target.files[0];\n                }\n                else if (evt) {\n                    file = evt[0];\n                }\n\n                if (!file) return false;\n                // todo : size over check\n\n                this.selected_file = file;\n                // 선택된 이미지 프리뷰 기능\n                (function (root) {\n                    root.els[\"preview-img\"].css({display: \"block\"});\n\n                    function setcss_preview(img, box_width, box_height) {\n                        var css = {};\n\n                        var image = new Image();\n                        image.src = img.src;\n                        image.onload = function () {\n                            // access image size here\n                            //console.log(this.width, this.height);\n                            if (this.width > this.height) { // 가로형\n                                if (this.height > box_height) {\n                                    css = {\n                                        width: this.width * (box_height / this.height), height: box_height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                                else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                            }\n                            else { // 세로형\n                                if (this.width > box_width) {\n                                    css = {\n                                        height: this.height * (box_width / this.width), width: box_width\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                                else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                            }\n                            console.log(css);\n                            root.els[\"preview-img\"].css(css);\n                        };\n                    }\n\n                    if (window.imagePicker) {\n                        preview.src = file;\n                        setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                    } else {\n                        var reader = new FileReader(target_id);\n                        reader.onloadend = function () {\n                            try {\n                                preview.src = reader.result;\n                                setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                            } catch (ex) {\n                                console.log(ex);\n                            }\n                        };\n                        if (file) {\n                            reader.readAsDataURL(file);\n                        }\n                    }\n                })(this);\n\n                if (cfg.on_event) {\n                    var that = {\n                        action: \"fileselect\",\n                        file: file\n                    };\n                    cfg.on_event.call(that, that);\n                }\n\n                /// 파일 선택하면 업로드\n                // if(file) this.upload(file);\n            };\n\n            this.__old_upload = function () {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({display: \"block\"});\n                progress_bar.css({width: '0%'});\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                }\n                else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({width: U.number((e.loaded / e.total) * 100, {round: 2}) + '%'});\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({display: \"none\"});\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData);  // multipart/form-data\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n})();\n","// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function(columnKeys) {\n        return `\n        `;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(TOAST.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}