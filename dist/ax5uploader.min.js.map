{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","ax5uploader","self","this","cfg","instanceId","getGuid","config","clickEventName","theme","lang","upload","abort","uploadedBox","columnKeys","name","type","size","uploadedName","uploadedPath","downloadPath","previewPath","thumbnail","animateTime","accept","multiple","manualUpload","progressBox","defaultBtns","label","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","$uploadedBox","__uploading","selectedFiles","selectedFilesTotal","__loaded","bound_onStateChanged","that","onStateChanged","call","bind","bound_onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","path","value","length","toArray","bound_openProgressBox","send","bound_alignLayout","bound_bindEvent","off","on","trigger","removeClass","get","$this","jQuery","cellType","attr","uploadedItemIndex","Number","parents","onclick","fileIndex","e","stopEvent","parent","$","contains","isFunction","dropZone","addEventListener","ondragover","ondragout","ondrop","window","event","_TF","box","offset","width","outerWidth","height","outerHeight","css","left","top","bound_alignProgressBox","append","_alignProgressBox","$window","$body","document","body","pos","positionMargin","dim","pickerDim","pickerDirection","$progressBox","position","winWidth","Math","max","winHeight","progressBoxDirection","positionCSS","$progressBoxArrow","viewport","selector","act","getAttribute","processor","setTimeout","$progressUpload","removeAttr","$progressAbort","state","bound_closeProgressBox","remove","bound_startUpload","html5","uploadFile","shift","bound_uploadComplete","formData","FormData","find","each","form","fileName","xhr","XMLHttpRequest","open","isString","action","onload","res","response","parseJson","debug","console","log","error","onuploaderror","bound_uploaded","onprogress","bound_updateProgressBar","loaded","total","$iframe","load","doc","contentWindow","contentDocument","root","documentElement","result","textContent","innerText","JSON","parse","submit","filesTotal","forEach","n","$progressBar","number","round","lengthComputable","concat","bound_repaintUploadedBox","onuploaded","onuploadComplete","bound_attachFileTag","bound_cancelUpload","html","tmpl","icon","init","_config","extend","data","isObject","getError","btns","hide","validateSelectedFiles","alert","setUploadedFiles","_files","isArray","clear","removeFile","_index","isNaN","splice","removeFileAll","selectFile","main","uploader_instance","push","arguments","setConfig","apply","uploader","uploadProgress","inputFile","inputFileForm","upoadedBox","apiServerUrl","tmplName","text","render","byte","mustache"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": { label: this.config.lang[\"upload\"], theme: \"btn-primary\" },\n                \"abort\": { label: this.config.lang[\"abort\"], theme: this.config.theme }\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            var bound_onStateChanged = function (that) {\n\n                var state = {\n                    \"open\": function open() {},\n                    \"close\": function close() {},\n                    \"upload\": function upload() {}\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            }.bind(this);\n\n            var bound_onSelectFile = function (_evt) {\n                var files = void 0;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                    // input file에 multiple 지원 안됨 그러므로 단일 파일 처리만 하면 됨.\n                    files = { path: _evt.target.value };\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    if (files.length == 1) {\n                        this.selectedFiles = [files[0]];\n                    } else {\n                        this.selectedFiles = U.toArray(files);\n                    }\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    bound_openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n\n                if (!ax5.info.supportFileApi) {\n                    bound_alignLayout(false);\n                }\n            }.bind(this);\n\n            var bound_bindEvent = function () {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                if (!ax5.info.supportFileApi) {\n                    this.$fileSelector.off(\"mouseover.ax5uploader\").on(\"mouseover.ax5uploader\", function () {\n                        bound_alignLayout(true);\n                    }.bind(this));\n\n                    this.$inputFile.off(\"mouseover.ax5uploader\").on(\"mouseover.ax5uploader\", function () {\n                        this.$fileSelector.addClass(\"active\");\n                    }.bind(this));\n\n                    this.$inputFile.off(\"mouseout.ax5uploader\").on(\"mouseout.ax5uploader\", function () {\n                        this.$fileSelector.removeClass(\"active\");\n\n                        bound_alignLayout(false);\n                    }.bind(this));\n                }\n\n                (function () {\n                    if (!this.$uploadedBox || !this.$uploadedBox.get(0)) return false;\n\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        var $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = Number($this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item')),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n\n                    this.$uploadedBox.on(\"dragstart\", function (e) {\n                        U.stopEvent(e);\n                        return false;\n                    });\n                }).call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    if (!ax5.info.supportFileApi) return false;\n                    if (!this.$dropZone || !this.$dropZone.get(0)) return false;\n\n                    var timer = void 0;\n\n                    this.$dropZone.parent().on(\"click\", \"[data-ax5uploader-dropzone]\", function (e) {\n                        var $target = jQuery(e.target);\n                        if ($target.parents('[data-ax5uploader-uploaded-item]').length == 0 && !$target.attr('data-ax5uploader-uploaded-item')) {\n                            if (this == e.target || $.contains(this, e.target)) {\n                                if (U.isFunction(cfg.dropZone.onclick)) {\n                                    cfg.dropZone.onclick.call({\n                                        self: self\n                                    });\n                                } else {\n                                    self.$inputFile.trigger(\"click\");\n                                }\n                            }\n                        }\n                    });\n\n                    this.$dropZone.get(0).addEventListener('dragover', function (e) {\n                        U.stopEvent(e);\n\n                        if (U.isFunction(cfg.dropZone.ondragover)) {\n                            cfg.dropZone.ondragover.call({\n                                self: self\n                            });\n                        } else {\n                            self.$dropZone.addClass(\"dragover\");\n                        }\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('dragleave', function (e) {\n                        U.stopEvent(e);\n\n                        if (U.isFunction(cfg.dropZone.ondragover)) {\n                            cfg.dropZone.ondragout.call({\n                                self: self\n                            });\n                        } else {\n                            self.$dropZone.removeClass(\"dragover\");\n                        }\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('drop', function (e) {\n                        U.stopEvent(e);\n\n                        if (U.isFunction(cfg.dropZone.ondrop)) {\n                            cfg.dropZone.ondrop.call({\n                                self: self\n                            });\n                        } else {\n                            self.$dropZone.removeClass(\"dragover\");\n                        }\n\n                        bound_onSelectFile(e || window.event);\n                    }, false);\n                }).call(this);\n            }.bind(this);\n\n            var bound_alignLayout = function (_TF) {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                if (_TF) {\n                    if (!ax5.info.supportFileApi) {\n                        // ie9에서 inputFile을 직접 클릭하지 않으면 submit 오류발생함. submit access denied\n                        // 그래서 버튼위에 inputFile을 올려두어야 함. (position값을 이용하면 편하지만..)\n                        // 그런데 form을 안에두면 또 다른 이중폼 문제 발생소지 ㅜㅜ 불가피하게 버튼의 offset 값을 이용.\n                        var box = this.$fileSelector.offset();\n                        box.width = this.$fileSelector.outerWidth();\n                        box.height = this.$fileSelector.outerHeight();\n                        this.$inputFile.css(box);\n                    }\n                } else {\n                    this.$inputFile.css({\n                        left: -1000, top: -1000\n                    });\n                }\n            }.bind(this);\n\n            var bound_alignProgressBox = function (append) {\n                var _alignProgressBox = function _alignProgressBox() {\n                    var $window = jQuery(window),\n                        $body = jQuery(document.body);\n                    var pos = {},\n                        positionMargin = 6,\n                        dim = {},\n                        pickerDim = {},\n                        pickerDirection = void 0;\n\n                    // cfg.viewport.selector\n\n                    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.progressBoxDirection || cfg.progressBoxDirection === \"\" || cfg.progressBoxDirection === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.progressBoxDirection;\n                    }\n\n                    if (append) {\n                        this.$progressBox.addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    var positionCSS = function () {\n                        var css = { left: 0, top: 0 };\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    }();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox.css(positionCSS);\n                };\n\n                this.$progressBox.css({ top: -999 });\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox.off(\"click.ax5uploader\").on(\"click.ax5uploader\", \"button\", function (_evt) {\n                        var act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                        var processor = {\n                            \"upload\": function upload() {\n                                this.send();\n                            },\n                            \"abort\": function abort() {\n                                this.abort();\n                            }\n                        };\n                        if (processor[act]) processor[act].call(this);\n                    }.bind(this));\n                }\n\n                setTimeout(function () {\n                    _alignProgressBox.call(this);\n                }.bind(this));\n            }.bind(this);\n\n            var bound_openProgressBox = function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                bound_alignProgressBox(\"append\");\n\n                // state change\n                bound_onStateChanged({\n                    self: this,\n                    state: \"open\"\n                });\n            }.bind(this);\n\n            var bound_closeProgressBox = function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout(function () {\n                    this.$progressBox.remove();\n                }.bind(this), cfg.animateTime);\n            }.bind(this);\n\n            var bound_startUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n\n                        var uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            bound_uploadComplete();\n                            return this;\n                        }\n\n                        if (uploadFile[0]) uploadFile = uploadFile[0];\n\n                        var formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", U.isString(cfg.form.action) ? cfg.form.action : cfg.form.action(), true);\n                        this.xhr.onload = function (e) {\n                            var res = e.target.response;\n                            try {\n                                if (typeof res === \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                if (U.isFunction(cfg.onuploaderror)) {\n                                    cfg.onuploaderror.call({\n                                        self: this,\n                                        error: res.error\n                                    }, res);\n                                }\n                                self.send();\n                                return false;\n                            }\n\n                            bound_uploaded(res);\n                            self.send();\n                        };\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            bound_updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n\n                        this.xhr.send(formData); // multipart/form-data\n                    },\n                    \"form\": function form() {\n\n                        /// i'm busy\n                        this.__uploading = true;\n\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        var $iframe = jQuery('<iframe src=\"javascript:false;\" name=\"ax5uploader-' + this.instanceId + '-iframe\" style=\"display:none;\"></iframe>');\n                        jQuery(document.body).append($iframe);\n\n                        // onload 이벤트 핸들러\n                        // action에서 파일을 받아 처리한 결과값을 텍스트로 출력한다고 가정하고 iframe의 내부 데이터를 결과값으로 callback 호출\n                        $iframe.load(function () {\n                            var doc = this.contentWindow ? this.contentWindow.document : this.contentDocument ? this.contentDocument : this.document,\n                                root = doc.documentElement ? doc.documentElement : doc.body,\n                                result = root.textContent ? root.textContent : root.innerText,\n                                res = void 0;\n\n                            try {\n                                res = JSON.parse(result);\n                            } catch (e) {\n                                res = {\n                                    error: \"Syntax error\",\n                                    body: result\n                                };\n                            }\n\n                            if (cfg.debug) console.log(res);\n                            if (res.error) {\n                                console.log(res);\n                            } else {\n                                bound_uploaded(res);\n                                $iframe.remove();\n\n                                setTimeout(function () {\n                                    bound_uploadComplete();\n                                }, 300);\n                            }\n                        });\n\n                        this.$inputFileForm.attr(\"target\", 'ax5uploader-' + this.instanceId + '-iframe').attr(\"action\", cfg.form.action).submit();\n\n                        this.selectedFilesTotal = 1;\n                        bound_updateProgressBar({\n                            loaded: 1,\n                            total: 1\n                        });\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    var filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n            }.bind(this);\n\n            var bound_updateProgressBar = function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({ width: U.number(this.__loaded / this.selectedFilesTotal * 100, { round: 2 }) + '%' });\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {}\n                }\n            }.bind(this);\n\n            var bound_uploaded = function (res) {\n                if (cfg.debug) console.log(res);\n                //this.uploadedFiles.push(res);\n                this.uploadedFiles = this.uploadedFiles.concat(res);\n                bound_repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }.bind(this);\n\n            var bound_uploadComplete = function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n\n                /// reset inputFile\n                bound_attachFileTag();\n            }.bind(this);\n\n            var bound_cancelUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function form() {}\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n\n                //this.$inputFile.val(\"\");\n                /// reset inputFile\n                bound_attachFileTag();\n\n                if (cfg.debug) console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }.bind(this);\n\n            var bound_repaintUploadedBox = function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(UPLOADER.tmpl.get(\"upoadedBox\", {\n                    uploadedFiles: this.uploadedFiles,\n                    icon: cfg.uploadedBox.icon,\n                    lang: cfg.uploadedBox.lang,\n                    supportFileApi: !!ax5.info.supportFileApi\n                }, cfg.uploadedBox.columnKeys));\n                this.$uploadedBox.find(\"img\").on(\"error\", function () {\n                    //this.src = \"\";\n                    $(this).parent().addClass(\"no-image\");\n                });\n            }.bind(this);\n\n            var bound_attachFileTag = function () {\n                if (this.$inputFile && this.$inputFile.get(0)) {\n                    this.$inputFile.remove();\n                }\n                if (this.$inputFileForm && this.$inputFileForm.get(0)) {\n                    this.$inputFileForm.remove();\n                }\n\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept,\n                    name: cfg.form.fileName\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$fileSelector.attr(\"tabindex\", -1);\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    bound_onSelectFile(_evt);\n                }.bind(this));\n            }.bind(this);\n\n            /**\n             * Preferences of uploader UI\n             * @method ax5uploader.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Object} _config.form\n             * @param {String} _config.form.action - upload URL\n             * @param {String} _config.form.fileName - The name key of the upload file\n             * @param {Boolean} [_config.multiple=false] - Whether multiple files. In a browser where fileApi is not supported (eg IE9), it only works with false.\n             * @param {String} [_config.accept=\"\"] - accept mimeType (http://www.w3schools.com/TAgs/att_input_accept.asp)\n             * @param {Boolean} [_config.manualUpload=false] - Whether to automatically upload when a file is selected.\n             * @param {Boolean} [_config.progressBox=true] - Whether to use progressBox\n             * @param {String} [_config.progressBoxDirection=auto] - ProgressBox display direction\n             * @param {Object} [_config.dropZone]\n             * @param {Element} [_config.dropZone.target]\n             * @param {Function} [_config.dropZone.onclick]\n             * @param {Function} [_config.dropZone.ondragover]\n             * @param {Function} [_config.dropZone.ondragout]\n             * @param {Function} [_config.dropZone.ondrop]\n             * @param {Object} [_config.uploadedBox]\n             * @param {Element} [_config.uploadedBox.target]\n             * @param {Element} [_config.uploadedBox.icon]\n             * @param {Object} [_config.uploadedBox.columnKeys]\n             * @param {String} [_config.uploadedBox.columnKeys.name]\n             * @param {String} [_config.uploadedBox.columnKeys.type]\n             * @param {String} [_config.uploadedBox.columnKeys.size]\n             * @param {String} [_config.uploadedBox.columnKeys.uploadedName]\n             * @param {String} [_config.uploadedBox.columnKeys.downloadPath]\n             * @param {Object} [_config.uploadedBox.lang]\n             * @param {String} [_config.uploadedBox.lang.supportedHTML5_emptyListMsg]\n             * @param {String} [_config.uploadedBox.lang.emptyListMsg]\n             * @param {Function} [_config.uploadedBox.onchange]\n             * @param {Function} [_config.uploadedBox.onclick]\n             * @param {Function} [_config.validateSelectedFiles]\n             * @param {Function} [_config.onprogress] - return loaded, total\n             * @param {Function} [_config.onuploaded] - return self\n             * @param {Function} [_config.onuploaderror] - return self, error\n             * @param {Function} [_config.onuploadComplete] - return self\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone && cfg.dropZone.target && ax5.info.supportFileApi) {\n                    this.$dropZone = jQuery(cfg.dropZone.target);\n                    this.$dropZone.attr(\"data-ax5uploader-dropzone\", this.instanceId);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                bound_attachFileTag();\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // file API가 지원되지 않는 브라우저는 중지 기능 제공 못함.\n                if (!ax5.info.supportFileApi) {\n                    this.$progressAbort.hide();\n                }\n                // 파일버튼 등에 이벤트 연결.\n                bound_bindEvent();\n\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.send\n             * @returns {ax5uploader}\n             *\n             */\n            this.send = function () {\n                return function () {\n                    // 업로드 시작\n                    if (this.selectedFiles.length && U.isFunction(cfg.validateSelectedFiles)) {\n                        var that = {\n                            self: this,\n                            uploadedFiles: this.uploadedFiles,\n                            selectedFiles: this.selectedFiles\n                        };\n                        if (!cfg.validateSelectedFiles.call(that, that)) {\n                            bound_cancelUpload();\n                            return false;\n                            // 전송처리 안함.\n                        }\n                    }\n\n                    bound_startUpload();\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5uploader.abort\n             * @returns {ax5uploader}\n             */\n            this.abort = function () {\n                return function () {\n                    if (!ax5.info.supportFileApi) {\n                        alert(\"This browser not supported abort method\");\n                        return this;\n                    }\n                    bound_cancelUpload();\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5uploader.setUploadedFiles\n             * @param {Array} _files - JSON formatting can all be overridden in columnKeys.\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * var upload1 = new ax5.ui.uploader();\n             * upload1.setConfig({\n             *  ...\n             * });\n             *\n             *\n             * $.ajax({\n             *     url: \"api/fileListLoad.php\",\n             *     success: function (res) {\n             *         // res JSON format\n             *         // [{\n             *         // \"name\": \"barcode-scan-ani.gif\",\n             *         // \"saveName\": \"barcode-scan-ani.gif\",\n             *         // \"type\": \"file\",\n             *         // \"fileSize\": \"3891664\",\n             *         // \"uploadedPath\": \"/ax5ui-uploader/test/api/files\",\n             *         // \"thumbUrl\": \"\"\n             *         // }]\n             *         upload1.setUploadedFiles(res);\n             *     }\n             * });\n             * ```\n             */\n            this.setUploadedFiles = function (_files) {\n                if (U.isArray(_files)) {\n                    this.uploadedFiles = _files;\n                }\n                if (U.isString(_files)) {\n                    try {\n                        this.uploadedFiles = JSON.parse(_files);\n                    } catch (e) {}\n                }\n\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * clear uploadedFiles\n             * @method ax5uploader.clear\n             * @returns {ax5uploader}\n             */\n            this.clear = function () {\n                this.setUploadedFiles([]);\n                return this;\n            };\n\n            /**\n             * Removes the object corresponding to the index passed to the argument from uploadedFiles.\n             * @method ax5uploader.removeFile\n             * @param {Number} _index\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * // The actual file is not deleted\n             * upload1.removeFile(fileIndex);\n             * ```\n             */\n            this.removeFile = function (_index) {\n                if (!isNaN(Number(_index))) {\n                    this.uploadedFiles.splice(_index, 1);\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Empty uploadedFiles\n             * @method ax5uploader.removeFileAll\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.removeFileAll = function () {\n                this.uploadedFiles = [];\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.selectFile\n             * @returns {Boolean}\n             */\n            this.selectFile = function () {\n                if (ax5.info.supportFileApi) {\n                    this.$inputFile.trigger(\"click\");\n                    return true;\n                }\n                return false;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" name=\\\"{{name}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" name=\\\"ax5uploader-{{instanceId}}-form\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    var progressBox = function progressBox(columnKeys) {\n        return \"\\n<div data-ax5uploader-progressbox=\\\"{{instanceId}}\\\" class=\\\"{{theme}}\\\">\\n    <div class=\\\"ax-progressbox-body\\\">\\n        <div class=\\\"ax-pregressbox-content\\\">\\n            <div class=\\\"progress\\\">\\n              <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" style=\\\"width: 0\\\">\\n                <span class=\\\"sr-only\\\">0% Complete</span>\\n              </div>\\n            </div>\\n        </div>\\n        {{#btns}}\\n            <div class=\\\"ax-progressbox-buttons\\\">\\n            {{#btns}}\\n                {{#@each}}\\n                <button data-pregressbox-btn=\\\"{{@key}}\\\" class=\\\"btn btn-default {{@value.theme}}\\\">{{@value.label}}</button>\\n                {{/@each}}\\n            {{/btns}}\\n            </div>\\n        {{/btns}}\\n    </div>\\n    <div class=\\\"ax-progressbox-arrow\\\"></div>\\n</div>\\n\";\n    };\n\n    var upoadedBox = function upoadedBox(columnKeys) {\n        return \"\\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\\\"{{@i}}\\\">\\n    <div class=\\\"uploaded-item-preview\\\">\\n        {{#\" + columnKeys.thumbnail + \"}}<img src=\\\"\" + columnKeys.apiServerUrl + \"{{\" + columnKeys.thumbnail + \"}}\\\">{{/\" + columnKeys.thumbnail + \"}}\\n    </div>\\n    <div class=\\\"uploaded-item-holder\\\">\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"download\\\">{{{icon.download}}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filename\\\">{{\" + columnKeys.name + \"}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filesize\\\">({{#@fn_get_byte}}{{\" + columnKeys.size + \"}}{{/@fn_get_byte}})</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"delete\\\">{{{icon.delete}}}</div>\\n    </div>\\n</div>{{/uploadedFiles}}\\n{{^uploadedFiles}}\\n{{#supportFileApi}}{{{lang.supportedHTML5_emptyListMsg}}}{{/supportFileApi}}\\n{{^supportFileApi}}{{{lang.emptyListMsg}}}{{/supportFileApi}}\\n{{/uploadedFiles}}\\n\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function get(tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function () {\n                return function (text, render) {\n                    return ax5.util.number(render(text), { round: 2, byte: true });\n                };\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            let self = this, cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": {label: this.config.lang[\"upload\"], theme: \"btn-primary\"},\n                \"abort\": {label: this.config.lang[\"abort\"], theme: this.config.theme}\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            let bound_onStateChanged = (function (that) {\n\n                let state = {\n                    \"open\": function () {\n\n                    },\n                    \"close\": function () {\n\n                    },\n                    \"upload\": function () {\n\n                    }\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            }).bind(this);\n\n            let bound_onSelectFile = (function (_evt) {\n                let files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                    // input file에 multiple 지원 안됨 그러므로 단일 파일 처리만 하면 됨.\n                    files = {path: _evt.target.value};\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    if(files.length == 1) {\n                        this.selectedFiles = [files[0]];\n                    }else{\n                        this.selectedFiles = U.toArray(files);\n                    }\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    bound_openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n\n                if (!ax5.info.supportFileApi) {\n                    bound_alignLayout(false);\n                }\n            }).bind(this);\n\n            let bound_bindEvent = (function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                if (!ax5.info.supportFileApi) {\n                    this.$fileSelector\n                        .off(\"mouseover.ax5uploader\")\n                        .on(\"mouseover.ax5uploader\", (function () {\n                            bound_alignLayout(true);\n                        }).bind(this));\n\n                    this.$inputFile\n                        .off(\"mouseover.ax5uploader\")\n                        .on(\"mouseover.ax5uploader\", (function () {\n                            this.$fileSelector.addClass(\"active\");\n                        }).bind(this));\n\n                    this.$inputFile\n                        .off(\"mouseout.ax5uploader\")\n                        .on(\"mouseout.ax5uploader\", (function () {\n                            this.$fileSelector.removeClass(\"active\");\n\n                            bound_alignLayout(false);\n                        }).bind(this));\n                }\n\n                (function () {\n                    if (!this.$uploadedBox || !this.$uploadedBox.get(0)) return false;\n\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        let $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = Number($this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item')),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n\n                    this.$uploadedBox\n                        .on(\"dragstart\", function (e) {\n                            U.stopEvent(e);\n                            return false;\n                        });\n\n\n                }).call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    if (!ax5.info.supportFileApi)  return false;\n                    if (!this.$dropZone || !this.$dropZone.get(0)) return false;\n\n                    let timer;\n\n                    this.$dropZone.parent()\n                        .on(\"click\", \"[data-ax5uploader-dropzone]\", function (e) {\n                            let $target = jQuery(e.target);\n                            if($target.parents('[data-ax5uploader-uploaded-item]').length == 0 && !$target.attr('data-ax5uploader-uploaded-item')) {\n                                if (this == e.target || $.contains(this, e.target)) {\n                                    if (U.isFunction(cfg.dropZone.onclick)) {\n                                        cfg.dropZone.onclick.call({\n                                            self: self\n                                        });\n                                    } else {\n                                        self.$inputFile.trigger(\"click\");\n                                    }\n                                }\n                            }\n                        });\n\n                    this.$dropZone.get(0).addEventListener('dragover', function (e) {\n                        U.stopEvent(e);\n                        \n                        if(U.isFunction(cfg.dropZone.ondragover)) {\n                            cfg.dropZone.ondragover.call({\n                                self: self\n                            });\n                        }else{\n                            self.$dropZone.addClass(\"dragover\");\n                        }\n\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('dragleave', function (e) {\n                        U.stopEvent(e);\n\n                        if(U.isFunction(cfg.dropZone.ondragover)) {\n                            cfg.dropZone.ondragout.call({\n                                self: self\n                            });\n                        }else{\n                            self.$dropZone.removeClass(\"dragover\");\n                        }\n\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('drop', function (e) {\n                        U.stopEvent(e);\n\n                        if(U.isFunction(cfg.dropZone.ondrop)) {\n                            cfg.dropZone.ondrop.call({\n                                self: self\n                            });\n                        }else{\n                            self.$dropZone.removeClass(\"dragover\");\n                        }\n\n                        bound_onSelectFile(e || window.event);\n                    }, false);\n\n                }).call(this);\n            }).bind(this);\n\n            let bound_alignLayout = (function (_TF) {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                if (_TF) {\n                    if (!ax5.info.supportFileApi) {\n                        // ie9에서 inputFile을 직접 클릭하지 않으면 submit 오류발생함. submit access denied\n                        // 그래서 버튼위에 inputFile을 올려두어야 함. (position값을 이용하면 편하지만..)\n                        // 그런데 form을 안에두면 또 다른 이중폼 문제 발생소지 ㅜㅜ 불가피하게 버튼의 offset 값을 이용.\n                        let box = this.$fileSelector.offset();\n                        box.width = this.$fileSelector.outerWidth();\n                        box.height = this.$fileSelector.outerHeight();\n                        this.$inputFile.css(box);\n                    }\n                } else {\n                    this.$inputFile.css({\n                        left: -1000, top: -1000\n                    });\n                }\n            }).bind(this);\n\n            let bound_alignProgressBox = (function (append) {\n                let _alignProgressBox = function () {\n                    let $window = jQuery(window), $body = jQuery(document.body);\n                    let pos = {}, positionMargin = 6,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    // cfg.viewport.selector\n\n                    pos = (this.$progressBox.parent().get(0) == this.$target.get(0)) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.progressBoxDirection || cfg.progressBoxDirection === \"\" || cfg.progressBoxDirection === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.progressBoxDirection;\n                    }\n\n                    if (append) {\n                        this.$progressBox\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    let positionCSS = (function () {\n                        let css = {left: 0, top: 0};\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    })();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox\n                        .css(positionCSS);\n                };\n\n                this.$progressBox.css({top: -999});\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox\n                        .off(\"click.ax5uploader\")\n                        .on(\"click.ax5uploader\", \"button\", (function (_evt) {\n                            let act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                            let processor = {\n                                \"upload\": function () {\n                                    this.send();\n                                },\n                                \"abort\": function () {\n                                    this.abort();\n                                }\n                            };\n                            if (processor[act]) processor[act].call(this);\n                        }).bind(this));\n                }\n\n                setTimeout((function () {\n                    _alignProgressBox.call(this);\n                }).bind(this));\n            }).bind(this);\n\n            let bound_openProgressBox = (function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                bound_alignProgressBox(\"append\");\n\n                // state change\n                bound_onStateChanged({\n                    self: this,\n                    state: \"open\"\n                });\n            }).bind(this);\n\n            let bound_closeProgressBox = (function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout((function () {\n                    this.$progressBox\n                        .remove();\n                }).bind(this), cfg.animateTime);\n            }).bind(this);\n\n            let bound_startUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n\n                        let uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            bound_uploadComplete();\n                            return this;\n                        }\n\n                        if(uploadFile[0]) uploadFile = uploadFile[0];\n\n                        let formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", U.isString(cfg.form.action) ? cfg.form.action : cfg.form.action(), true);\n                        this.xhr.onload = function (e) {\n                            let res = e.target.response;\n                            try {\n                                if (typeof res === \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                if (U.isFunction(cfg.onuploaderror)) {\n                                    cfg.onuploaderror.call({\n                                        self: this,\n                                        error: res.error\n                                    }, res);\n                                }\n                                self.send();\n                                return false;\n                            }\n\n                            bound_uploaded(res);\n                            self.send();\n                        };\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            bound_updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n\n                        this.xhr.send(formData);  // multipart/form-data\n\n                    },\n                    \"form\": function () {\n\n                        /// i'm busy\n                        this.__uploading = true;\n\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        let $iframe = jQuery('<iframe src=\"javascript:false;\" name=\"ax5uploader-' + this.instanceId + '-iframe\" style=\"display:none;\"></iframe>');\n                        jQuery(document.body).append($iframe);\n\n                        // onload 이벤트 핸들러\n                        // action에서 파일을 받아 처리한 결과값을 텍스트로 출력한다고 가정하고 iframe의 내부 데이터를 결과값으로 callback 호출\n                        $iframe.load(function () {\n                            let doc = this.contentWindow ? this.contentWindow.document : (this.contentDocument ? this.contentDocument : this.document),\n                                root = doc.documentElement ? doc.documentElement : doc.body,\n                                result = root.textContent ? root.textContent : root.innerText,\n                                res;\n\n                            try {\n                                res = JSON.parse(result);\n                            } catch (e) {\n                                res = {\n                                    error: \"Syntax error\",\n                                    body: result\n                                };\n                            }\n\n                            if (cfg.debug) console.log(res);\n                            if (res.error) {\n                                console.log(res);\n                            }\n                            else {\n                                bound_uploaded(res);\n                                $iframe.remove();\n\n                                setTimeout(function () {\n                                    bound_uploadComplete();\n                                }, 300);\n                            }\n                        });\n\n                        this.$inputFileForm\n                            .attr(\"target\", 'ax5uploader-' + this.instanceId + '-iframe')\n                            .attr(\"action\", cfg.form.action)\n                            .submit();\n\n                        this.selectedFilesTotal = 1;\n                        bound_updateProgressBar({\n                            loaded: 1,\n                            total: 1\n                        });\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    let filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n            }).bind(this);\n\n            let bound_updateProgressBar = (function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({width: U.number(this.__loaded / this.selectedFilesTotal * 100, {round: 2}) + '%'});\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {\n\n                    }\n                }\n            }).bind(this);\n\n            let bound_uploaded = (function (res) {\n                if (cfg.debug) console.log(res);\n                //this.uploadedFiles.push(res);\n                this.uploadedFiles = this.uploadedFiles.concat(res);\n                bound_repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }).bind(this);\n\n            let bound_uploadComplete = (function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n\n                /// reset inputFile\n                bound_attachFileTag();\n            }).bind(this);\n\n            let bound_cancelUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function () {\n\n                    }\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n\n                //this.$inputFile.val(\"\");\n                /// reset inputFile\n                bound_attachFileTag();\n\n                if (cfg.debug) console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }).bind(this);\n\n            let bound_repaintUploadedBox = (function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(\n                    UPLOADER.tmpl.get(\"upoadedBox\", {\n                        uploadedFiles: this.uploadedFiles,\n                        icon: cfg.uploadedBox.icon,\n                        lang: cfg.uploadedBox.lang,\n                        supportFileApi: !!ax5.info.supportFileApi\n                    }, cfg.uploadedBox.columnKeys)\n                );\n                this.$uploadedBox.find(\"img\").on(\"error\", function () {\n                   //this.src = \"\";\n                   $(this).parent().addClass(\"no-image\");\n                });\n                \n            }).bind(this);\n\n            let bound_attachFileTag = (function () {\n                if (this.$inputFile && this.$inputFile.get(0)) {\n                    this.$inputFile.remove();\n                }\n                if (this.$inputFileForm && this.$inputFileForm.get(0)) {\n                    this.$inputFileForm.remove();\n                }\n\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept,\n                    name: cfg.form.fileName\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$fileSelector.attr(\"tabindex\", -1);\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        bound_onSelectFile(_evt);\n                    }).bind(this));\n\n            }).bind(this);\n\n            /**\n             * Preferences of uploader UI\n             * @method ax5uploader.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Object} _config.form\n             * @param {String} _config.form.action - upload URL\n             * @param {String} _config.form.fileName - The name key of the upload file\n             * @param {Boolean} [_config.multiple=false] - Whether multiple files. In a browser where fileApi is not supported (eg IE9), it only works with false.\n             * @param {String} [_config.accept=\"\"] - accept mimeType (http://www.w3schools.com/TAgs/att_input_accept.asp)\n             * @param {Boolean} [_config.manualUpload=false] - Whether to automatically upload when a file is selected.\n             * @param {Boolean} [_config.progressBox=true] - Whether to use progressBox\n             * @param {String} [_config.progressBoxDirection=auto] - ProgressBox display direction\n             * @param {Object} [_config.dropZone]\n             * @param {Element} [_config.dropZone.target]\n             * @param {Function} [_config.dropZone.onclick]\n             * @param {Function} [_config.dropZone.ondragover]\n             * @param {Function} [_config.dropZone.ondragout]\n             * @param {Function} [_config.dropZone.ondrop]\n             * @param {Object} [_config.uploadedBox]\n             * @param {Element} [_config.uploadedBox.target]\n             * @param {Element} [_config.uploadedBox.icon]\n             * @param {Object} [_config.uploadedBox.columnKeys]\n             * @param {String} [_config.uploadedBox.columnKeys.name]\n             * @param {String} [_config.uploadedBox.columnKeys.type]\n             * @param {String} [_config.uploadedBox.columnKeys.size]\n             * @param {String} [_config.uploadedBox.columnKeys.uploadedName]\n             * @param {String} [_config.uploadedBox.columnKeys.downloadPath]\n             * @param {Object} [_config.uploadedBox.lang]\n             * @param {String} [_config.uploadedBox.lang.supportedHTML5_emptyListMsg]\n             * @param {String} [_config.uploadedBox.lang.emptyListMsg]\n             * @param {Function} [_config.uploadedBox.onchange]\n             * @param {Function} [_config.uploadedBox.onclick]\n             * @param {Function} [_config.validateSelectedFiles]\n             * @param {Function} [_config.onprogress] - return loaded, total\n             * @param {Function} [_config.onuploaded] - return self\n             * @param {Function} [_config.onuploaderror] - return self, error\n             * @param {Function} [_config.onuploadComplete] - return self\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone && cfg.dropZone.target && ax5.info.supportFileApi) {\n                    this.$dropZone = jQuery(cfg.dropZone.target);\n                    this.$dropZone\n                        .attr(\"data-ax5uploader-dropzone\", this.instanceId);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                bound_attachFileTag();\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // file API가 지원되지 않는 브라우저는 중지 기능 제공 못함.\n                if (!ax5.info.supportFileApi) {\n                    this.$progressAbort.hide();\n                }\n                // 파일버튼 등에 이벤트 연결.\n                bound_bindEvent();\n\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.send\n             * @returns {ax5uploader}\n             *\n             */\n            this.send = (function () {\n                return function () {\n                    // 업로드 시작\n                    if (this.selectedFiles.length && U.isFunction(cfg.validateSelectedFiles)) {\n                        let that = {\n                            self: this,\n                            uploadedFiles: this.uploadedFiles,\n                            selectedFiles: this.selectedFiles\n                        };\n                        if (!cfg.validateSelectedFiles.call(that, that)) {\n                            bound_cancelUpload();\n                            return false;\n                            // 전송처리 안함.\n                        }\n                    }\n\n                    bound_startUpload();\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5uploader.abort\n             * @returns {ax5uploader}\n             */\n            this.abort = (function () {\n                return function () {\n                    if (!ax5.info.supportFileApi) {\n                        alert(\"This browser not supported abort method\");\n                        return this;\n                    }\n                    bound_cancelUpload();\n                    return this;\n                };\n            })();\n\n            /**\n             * @method ax5uploader.setUploadedFiles\n             * @param {Array} _files - JSON formatting can all be overridden in columnKeys.\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * var upload1 = new ax5.ui.uploader();\n             * upload1.setConfig({\n             *  ...\n             * });\n             *\n             *\n             * $.ajax({\n             *     url: \"api/fileListLoad.php\",\n             *     success: function (res) {\n             *         // res JSON format\n             *         // [{\n             *         // \"name\": \"barcode-scan-ani.gif\",\n             *         // \"saveName\": \"barcode-scan-ani.gif\",\n             *         // \"type\": \"file\",\n             *         // \"fileSize\": \"3891664\",\n             *         // \"uploadedPath\": \"/ax5ui-uploader/test/api/files\",\n             *         // \"thumbUrl\": \"\"\n             *         // }]\n             *         upload1.setUploadedFiles(res);\n             *     }\n             * });\n             * ```\n             */\n            this.setUploadedFiles = function (_files) {\n                if (U.isArray(_files)) {\n                    this.uploadedFiles = _files;\n                }\n                if (U.isString(_files)) {\n                    try {\n                        this.uploadedFiles = JSON.parse(_files);\n                    } catch (e) {\n\n                    }\n                }\n\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * clear uploadedFiles\n             * @method ax5uploader.clear\n             * @returns {ax5uploader}\n             */\n            this.clear = function () {\n                this.setUploadedFiles([]);\n                return this;\n            };\n\n            /**\n             * Removes the object corresponding to the index passed to the argument from uploadedFiles.\n             * @method ax5uploader.removeFile\n             * @param {Number} _index\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * // The actual file is not deleted\n             * upload1.removeFile(fileIndex);\n             * ```\n             */\n            this.removeFile = function (_index) {\n                if (!isNaN(Number(_index))) {\n                    this.uploadedFiles.splice(_index, 1);\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Empty uploadedFiles\n             * @method ax5uploader.removeFileAll\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.removeFileAll = function () {\n                this.uploadedFiles = [];\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.selectFile\n             * @returns {Boolean}\n             */\n            this.selectFile = function () {\n                if (ax5.info.supportFileApi) {\n                    this.$inputFile.trigger(\"click\");\n                    return true;\n                }\n                return false;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function (columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" name=\"{{name}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" name=\"ax5uploader-{{instanceId}}-form\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    let progressBox = function (columnKeys) {\n        return `\n<div data-ax5uploader-progressbox=\"{{instanceId}}\" class=\"{{theme}}\">\n    <div class=\"ax-progressbox-body\">\n        <div class=\"ax-pregressbox-content\">\n            <div class=\"progress\">\n              <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" style=\"width: 0\">\n                <span class=\"sr-only\">0% Complete</span>\n              </div>\n            </div>\n        </div>\n        {{#btns}}\n            <div class=\"ax-progressbox-buttons\">\n            {{#btns}}\n                {{#@each}}\n                <button data-pregressbox-btn=\"{{@key}}\" class=\"btn btn-default {{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        {{/btns}}\n    </div>\n    <div class=\"ax-progressbox-arrow\"></div>\n</div>\n`;\n    };\n\n    let upoadedBox = function (columnKeys) {\n        return `\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\"{{@i}}\">\n    <div class=\"uploaded-item-preview\">\n        {{#${columnKeys.thumbnail}}}<img src=\"${columnKeys.apiServerUrl}{{${columnKeys.thumbnail}}}\">{{/${columnKeys.thumbnail}}}\n    </div>\n    <div class=\"uploaded-item-holder\">\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"download\">{{{icon.download}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filename\">{{${columnKeys.name}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filesize\">({{#@fn_get_byte}}{{${columnKeys.size}}}{{/@fn_get_byte}})</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"delete\">{{{icon.delete}}}</div>\n    </div>\n</div>{{/uploadedFiles}}\n{{^uploadedFiles}}\n{{#supportFileApi}}{{{lang.supportedHTML5_emptyListMsg}}}{{/supportFileApi}}\n{{^supportFileApi}}{{{lang.emptyListMsg}}}{{/supportFileApi}}\n{{/uploadedFiles}}\n`;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function (tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function() {\n                return function (text, render) {\n                    return ax5.util.number(render(text), {round: 2, byte: true});\n                }\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}