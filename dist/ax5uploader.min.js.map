{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","version","ax5uploader","self","this","cfg","instanceId","getGuid","config","clickEventName","theme","lang","upload","abort","uploadedBox","columnKeys","name","type","size","uploadedName","uploadedPath","downloadPath","previewPath","thumbnail","animateTime","accept","multiple","manualUpload","progressBox","defaultBtns","label","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","$uploadedBox","__uploading","selectedFiles","selectedFilesTotal","__loaded","onStateChanged","that","call","onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","length","toArray","openProgressBox","send","bindEvent","off","on","trigger","bind","alignLayout","alignProgressBox","append","_alignProgressBox","$window","jQuery","window","$body","document","body","pos","positionMargin","dim","pickerDim","pickerDirection","$progressBox","parent","get","position","offset","width","outerWidth","height","outerHeight","winWidth","Math","max","winHeight","direction","top","positionCSS","css","left","$progressBoxArrow","viewport","selector","act","getAttribute","processor","setTimeout","removeClass","$progressUpload","removeAttr","$progressAbort","state","closeProgressBox","remove","startUpload","html5","uploadFile","shift","uploadComplete","formData","FormData","find","each","value","form","fileName","xhr","XMLHttpRequest","open","action","onload","e","res","response","parseJson","debug","console","log","error","uploaded","onprogress","updateProgressBar","isFunction","loaded","total","iframe","$","filesTotal","forEach","n","attr","$progressBar","number","round","lengthComputable","push","repaintUploadedBox","onuploaded","onuploadComplete","cancelUpload","html","tmpl","icon","init","_config","extend","dropZone","$this","cellType","uploadedItemIndex","parents","onclick","fileIndex","data","isObject","getError","btns","setUploadedFile","isArray","main","uploader_instance","arguments","setConfig","apply","uploader","uploadProgress","inputFile","inputFileForm","upoadedBox","tmplName","text","render","byte","mustache"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": { label: this.config.lang[\"upload\"], theme: \"btn-primary\" },\n                \"abort\": { label: this.config.lang[\"abort\"], theme: this.config.theme }\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            var onStateChanged = function onStateChanged(that) {\n\n                var state = {\n                    \"open\": function open() {},\n                    \"close\": function close() {},\n                    \"upload\": function upload() {}\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            };\n\n            var onSelectFile = function onSelectFile(_evt) {\n                var files = void 0;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            };\n\n            var bindEvent = function bindEvent() {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    onSelectFile.call(this, _evt);\n                }.bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            var alignLayout = function alignLayout() {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            var alignProgressBox = function alignProgressBox(append) {\n                var _alignProgressBox = function _alignProgressBox() {\n                    var $window = jQuery(window),\n                        $body = jQuery(document.body);\n                    var pos = {},\n                        positionMargin = 6,\n                        dim = {},\n                        pickerDim = {},\n                        pickerDirection = void 0;\n\n                    // cfg.viewport.selector\n\n                    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox.addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    var positionCSS = function () {\n                        var css = { left: 0, top: 0 };\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    }();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox.css(positionCSS);\n                };\n\n                this.$progressBox.css({ top: -999 });\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox.off(\"click.ax5uploader\").on(\"click.ax5uploader\", \"button\", function (_evt) {\n                        var act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                        var processor = {\n                            \"upload\": function upload() {\n                                this.send();\n                            },\n                            \"abort\": function abort() {\n                                this.abort();\n                            }\n                        };\n                        if (processor[act]) processor[act].call(this);\n                    }.bind(this));\n                }\n\n                setTimeout(function () {\n                    _alignProgressBox.call(this);\n                }.bind(this));\n            };\n\n            var openProgressBox = function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                alignProgressBox.call(this, \"append\");\n\n                // state change\n                onStateChanged.call(this, {\n                    self: this,\n                    state: \"open\"\n                });\n            }.bind(this);\n\n            var closeProgressBox = function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout(function () {\n                    this.$progressBox.remove();\n                }.bind(this), cfg.animateTime);\n            }.bind(this);\n\n            var startUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n\n                        var uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            uploadComplete();\n                            return this;\n                        }\n\n                        var formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            var res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                return false;\n                            }\n\n                            uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData); // multipart/form-data\n                    },\n                    \"form\": function form() {\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        // iframe 생성\n                        var iframe = $('<iframe src=\"javascript:false;\" name=\"\" style=\"display:none;\"></iframe>');\n                        // form 생성.\n\n                        $(document.body).append(iframe);\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    var filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n            }.bind(this);\n\n            var updateProgressBar = function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({ width: U.number(this.__loaded / this.selectedFilesTotal * 100, { round: 2 }) + '%' });\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {}\n                }\n            }.bind(this);\n\n            var uploaded = function (res) {\n                if (cfg.debug) console.log(res);\n                this.uploadedFiles.push(res);\n                repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }.bind(this);\n\n            var uploadComplete = function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n            }.bind(this);\n\n            var cancelUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function form() {}\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    closeProgressBox();\n                }\n\n                this.$inputFile.get(0).value = \"\";\n                console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }.bind(this);\n\n            var repaintUploadedBox = function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(UPLOADER.tmpl.get(\"upoadedBox\", {\n                    uploadedFiles: this.uploadedFiles,\n                    icon: cfg.uploadedBox.icon\n                }, cfg.uploadedBox.columnKeys));\n            }.bind(this);\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        var $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = $this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item'),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n            };\n\n            /**\n             * @method ax5uploader.send\n             *\n             */\n            this.send = function () {\n\n                return function () {\n                    // 업로드 시작\n                    startUpload();\n                };\n            }();\n\n            /**\n             * @method ax5uploader.abort\n             */\n            this.abort = function () {\n\n                return function () {\n                    cancelUpload();\n                };\n            }();\n\n            /**\n             * @method ax5uploader.setUploadedFile\n             * @param {Array} files\n             */\n            this.setUploadedFile = function (files) {\n                if (U.isArray(files)) {\n                    this.uploadedFiles = files;\n                }\n                repaintUploadedBox();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n// todo :\n// html5용 업로드 - 구현완료\n// abort, 여러개의 파일이 올라가는 중간에 abort 하면 업로드된 파일은 두고. 안올라간 파일만 중지 -- ok\n// set uploded files\n// uploaded files display, needs columnKeys\n// delete file\n\n// dropFile support\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    var progressBox = function progressBox(columnKeys) {\n        return \"\\n<div data-ax5uploader-progressbox=\\\"{{instanceId}}\\\" class=\\\"{{theme}}\\\">\\n    <div class=\\\"ax-progressbox-body\\\">\\n        <div class=\\\"ax-pregressbox-content\\\">\\n            <div class=\\\"progress\\\">\\n              <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" style=\\\"width: 0\\\">\\n                <span class=\\\"sr-only\\\">0% Complete</span>\\n              </div>\\n            </div>\\n        </div>\\n        {{#btns}}\\n            <div class=\\\"ax-progressbox-buttons\\\">\\n            {{#btns}}\\n                {{#@each}}\\n                <button data-pregressbox-btn=\\\"{{@key}}\\\" class=\\\"btn btn-default {{@value.theme}}\\\">{{@value.label}}</button>\\n                {{/@each}}\\n            {{/btns}}\\n            </div>\\n        {{/btns}}\\n    </div>\\n    <div class=\\\"ax-progressbox-arrow\\\"></div>\\n</div>\\n\";\n    };\n\n    var upoadedBox = function upoadedBox(columnKeys) {\n        return \"\\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\\\"{{@i}}\\\">\\n    <div class=\\\"uploaded-item-holder\\\" >\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"download\\\">{{{icon.download}}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filename\\\">{{\" + columnKeys.name + \"}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filesize\\\">({{#@fn_get_byte}}{{\" + columnKeys.size + \"}}{{/@fn_get_byte}})</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"delete\\\">{{{icon.delete}}}</div>\\n    </div>\\n</div>{{/uploadedFiles}}\\n\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function get(tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function () {\n                return function (text, render) {\n                    return ax5.util.number(render(text), { round: 2, byte: true });\n                };\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": {label: this.config.lang[\"upload\"], theme: \"btn-primary\"},\n                \"abort\": {label: this.config.lang[\"abort\"], theme: this.config.theme}\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            let onStateChanged = function (that) {\n\n                let state = {\n                    \"open\": function () {\n\n                    },\n                    \"close\": function () {\n\n                    },\n                    \"upload\": function () {\n\n                    }\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            };\n\n            let onSelectFile = function (_evt) {\n                let files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            };\n\n            let bindEvent = function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        onSelectFile.call(this, _evt);\n                    }).bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            let alignLayout = function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            let alignProgressBox = function (append) {\n                let _alignProgressBox = function () {\n                    let $window = jQuery(window), $body = jQuery(document.body);\n                    let pos = {}, positionMargin = 6,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    // cfg.viewport.selector\n\n                    pos = (this.$progressBox.parent().get(0) == this.$target.get(0)) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    let positionCSS = (function () {\n                        let css = {left: 0, top: 0};\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    })();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox\n                        .css(positionCSS);\n                };\n\n                this.$progressBox.css({top: -999});\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox\n                        .off(\"click.ax5uploader\")\n                        .on(\"click.ax5uploader\", \"button\", (function (_evt) {\n                            let act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                            let processor = {\n                                \"upload\": function () {\n                                    this.send();\n                                },\n                                \"abort\": function () {\n                                    this.abort();\n                                }\n                            };\n                            if (processor[act]) processor[act].call(this);\n                        }).bind(this));\n                }\n\n                setTimeout((function () {\n                    _alignProgressBox.call(this);\n                }).bind(this));\n            };\n\n            let openProgressBox = (function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                alignProgressBox.call(this, \"append\");\n\n                // state change\n                onStateChanged.call(this, {\n                    self: this,\n                    state: \"open\"\n                });\n            }).bind(this);\n\n            let closeProgressBox = (function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout((function () {\n                    this.$progressBox\n                        .remove();\n                }).bind(this), cfg.animateTime);\n            }).bind(this);\n\n            let startUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n\n                        let uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            uploadComplete();\n                            return this;\n                        }\n\n                        let formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            let res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                return false;\n                            }\n\n                            uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData);  // multipart/form-data\n\n                    },\n                    \"form\": function () {\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        // iframe 생성\n                        let iframe = $('<iframe src=\"javascript:false;\" name=\"\" style=\"display:none;\"></iframe>');\n                        // form 생성.\n\n                        $(document.body).append(iframe);\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    let filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n            }).bind(this);\n\n            let updateProgressBar = (function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({width: U.number(this.__loaded / this.selectedFilesTotal * 100, {round: 2}) + '%'});\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {\n\n                    }\n                }\n            }).bind(this);\n\n            let uploaded = (function (res) {\n                if (cfg.debug) console.log(res);\n                this.uploadedFiles.push(res);\n                repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }).bind(this);\n\n            let uploadComplete = (function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n            }).bind(this);\n\n            let cancelUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function () {\n\n                    }\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    closeProgressBox();\n                }\n\n                this.$inputFile.get(0).value = \"\";\n                console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }).bind(this);\n\n            let repaintUploadedBox = (function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(\n                    UPLOADER.tmpl.get(\"upoadedBox\", {\n                        uploadedFiles: this.uploadedFiles,\n                        icon: cfg.uploadedBox.icon\n                    }, cfg.uploadedBox.columnKeys)\n                );\n\n            }).bind(this);\n\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        let $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = $this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item'),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n            };\n\n            /**\n             * @method ax5uploader.send\n             *\n             */\n            this.send = (function () {\n\n                return function () {\n                    // 업로드 시작\n                    startUpload();\n                }\n            })();\n\n            /**\n             * @method ax5uploader.abort\n             */\n            this.abort = (function () {\n\n                return function () {\n                    cancelUpload();\n                };\n            })();\n\n            /**\n             * @method ax5uploader.setUploadedFile\n             * @param {Array} files\n             */\n            this.setUploadedFile = function (files) {\n                if (U.isArray(files)) {\n                    this.uploadedFiles = files;\n                }\n                repaintUploadedBox();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n\n// todo :\n// html5용 업로드 - 구현완료\n// abort, 여러개의 파일이 올라가는 중간에 abort 하면 업로드된 파일은 두고. 안올라간 파일만 중지 -- ok\n// set uploded files\n// uploaded files display, needs columnKeys\n// delete file\n\n// dropFile support","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function (columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    let progressBox = function (columnKeys) {\n        return `\n<div data-ax5uploader-progressbox=\"{{instanceId}}\" class=\"{{theme}}\">\n    <div class=\"ax-progressbox-body\">\n        <div class=\"ax-pregressbox-content\">\n            <div class=\"progress\">\n              <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" style=\"width: 0\">\n                <span class=\"sr-only\">0% Complete</span>\n              </div>\n            </div>\n        </div>\n        {{#btns}}\n            <div class=\"ax-progressbox-buttons\">\n            {{#btns}}\n                {{#@each}}\n                <button data-pregressbox-btn=\"{{@key}}\" class=\"btn btn-default {{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        {{/btns}}\n    </div>\n    <div class=\"ax-progressbox-arrow\"></div>\n</div>\n`;\n    };\n\n    let upoadedBox = function (columnKeys) {\n        return `\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\"{{@i}}\">\n    <div class=\"uploaded-item-holder\" >\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"download\">{{{icon.download}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filename\">{{${columnKeys.name}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filesize\">({{#@fn_get_byte}}{{${columnKeys.size}}}{{/@fn_get_byte}})</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"delete\">{{{icon.delete}}}</div>\n    </div>\n</div>{{/uploadedFiles}}\n`;\n\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function (tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function() {\n                return function (text, render) {\n                    return ax5.util.number(render(text), {round: 2, byte: true});\n                }\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}