{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","addClass","className","version","ax5uploader","cfg","this","instanceId","getGuid","config","clickEventName","theme","file_types","queue","$target","$inputContainer","$inputFile","$fileSelector","$uploadControler","$dropZone","bindEvent","off","on","trigger","bind","alignLayout","box","position","width","outerWidth","height","outerHeight","css","init","_config","jQuery","extend","target","dropZone","data","isObject","error","call","parseJson","attr","append","find","length","console","log","info","getError","main","uploader_instance","push","arguments","setConfig","apply","UPLOADER","uploader","uploadProgress","columnKeys","tmpl","get","tmplName","mustache","render","TOAST"],"mappings":"AAAA,cCCA,WAEA,GAAAA,GAAAC,IAAAC,GACAC,EAAAF,IAAAG,IAEAJ,GAAAK,UACAC,UAAA,WACAC,QAAA,cACA,WAEA,GAAAC,GAAA,WACA,GACAC,GAAAA,MAEAC,MAAAC,WAAAV,IAAAW,UACAF,KAAAG,QACAC,eAAA,QACAC,MAAA,UACAC,WAAA,OAIAN,KAAAO,SAEAP,KAAAQ,QAAA,KAEAR,KAAAS,gBAAA,KAEAT,KAAAU,WAAA,KAEAV,KAAAW,cAAA,KAEAX,KAAAY,iBAAA,KAEAZ,KAAAa,UAAA,KAEAd,EAAAC,KAAAG,MAEA,IAmLAW,GAAA,WACAd,KAAAW,cACAI,IAAA,qBACAC,GAAA,oBAAA,WACAhB,KAAAU,WAAAO,QAAA,UACAC,KAAAlB,QAGAmB,EAAA,WACA,GAAAC,GAAApB,KAAAW,cAAAU,UACAD,GAAAE,MAAAtB,KAAAW,cAAAY,aACAH,EAAAI,OAAAxB,KAAAW,cAAAc,cACAzB,KAAAU,WAAAgB,IAAAN,GAKApB,MAAA2B,KAAA,SAAAC,GAEA,MADA7B,GAAA8B,OAAAC,QAAA,KAAA/B,EAAA6B,GACA7B,EAAAgC,QAKA/B,KAAAQ,QAAAqB,OAAA9B,EAAAgC,QAGAhC,EAAAiC,WACAhC,KAAAa,UAAAgB,OAAA9B,EAAAiC,WAIA,SAAAC,GACAxC,EAAAyC,SAAAD,KAAAA,EAAAE,QACApC,EAAA8B,OAAAC,QAAA,EAAA/B,EAAAkC,KAEAG,KAAApC,KAAAP,EAAA4C,UAAArC,KAAAQ,QAAA8B,KAAA,4BAAA,IAGAtC,KAAAS,gBAAAoB,OAAA,mDACA7B,KAAAQ,QAAA+B,OAAAvC,KAAAS,iBAIAT,KAAAW,cAAAX,KAAAQ,QAAAgC,KAAA,wCAEAxC,KAAAY,iBAAAZ,KAAAQ,QAAAgC,KAAA,uCAEA,IAAAxC,KAAAW,cAAA8B,QACAC,QAAAC,IAAApD,IAAAqD,KAAAC,SAAA,cAAA,MAAA,+BACA7C,OAIAA,KAAAU,WAAAmB,OAAA,yBACA7B,KAAAQ,QAAA+B,OAAAvC,KAAAU,YAGAS,EAAAiB,KAAApC,MAGAc,EAAAsB,KAAApC,UAEA,YAEA,OAAA,GAkCAoC,KAAApC,SA/EA0C,QAAAC,IAAApD,IAAAqD,KAAAC,SAAA,cAAA,MAAA,SACA7C,OAkFAA,KAAA8C,KAAA,WACAxD,EAAAyD,kBAAAzD,EAAAyD,sBACAzD,EAAAyD,kBAAAC,KAAAhD,MAEAiD,WAAAxD,EAAAyC,SAAAe,UAAA,KACAjD,KAAAkD,UAAAD,UAAA,KAKAE,MAAAnD,KAAAiD,WAEA,OAAAnD,UC5UA,WAEA,GAAAsD,GAAA7D,IAAAC,GAAA6D,SAEAC,EAAA,SAAAC,GACA,MAAA,aAIAH,GAAAI,MACAF,eAAAA,EAEAG,IAAA,SAAAC,EAAAzB,EAAAsB,GACA,MAAAhE,KAAAoE,SAAAC,OAAAC,MAAAL,KAAAE,GAAAtB,KAAApC,KAAAuD,GAAAtB","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                file_types: \"*/*\"\n            };\n\n            /// 업로드된 파일 큐\n            this.queue = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 전송버튼\n            this.$uploadControler = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            var __request_select_file = function __request_select_file() {\n                if (cfg.before_select_file) {\n                    if (!cfg.before_select_file.call()) {\n                        return false; // 중지\n                    }\n                }\n\n                if (window.imagePicker) {\n                    window.imagePicker.getPictures(function (results) {\n                        for (var i = 0; i < results.length; i++) {\n                            console.log('Image URI: ' + results[i]);\n                        }\n                        _this.__on_select_file(results);\n                    }, function (error) {\n                        console.log('Error: ' + error);\n                    });\n                } else {\n                    this.els[\"input-file\"].trigger(\"click\");\n                }\n            };\n\n            var __old_select_file = function __old_select_file(evt) {\n                var file,\n                    target_id = this.target.id,\n                    preview = this.els[\"preview-img\"].get(0);\n\n                if ('dataTransfer' in evt) {\n                    file = evt.dataTransfer.files[0];\n                } else if ('target' in evt) {\n                    file = evt.target.files[0];\n                } else if (evt) {\n                    file = evt[0];\n                }\n\n                if (!file) return false;\n                // todo : size over check\n\n                this.selected_file = file;\n                // 선택된 이미지 프리뷰 기능\n                (function (root) {\n                    root.els[\"preview-img\"].css({ display: \"block\" });\n\n                    function setcss_preview(img, box_width, box_height) {\n                        var css = {};\n\n                        var image = new Image();\n                        image.src = img.src;\n                        image.onload = function () {\n                            // access image size here\n                            //console.log(this.width, this.height);\n                            if (this.width > this.height) {\n                                // 가로형\n                                if (this.height > box_height) {\n                                    css = {\n                                        width: this.width * (box_height / this.height), height: box_height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                } else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                            } else {\n                                // 세로형\n                                if (this.width > box_width) {\n                                    css = {\n                                        height: this.height * (box_width / this.width), width: box_width\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                } else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                            }\n                            console.log(css);\n                            root.els[\"preview-img\"].css(css);\n                        };\n                    }\n\n                    if (window.imagePicker) {\n                        preview.src = file;\n                        setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                    } else {\n                        var reader = new FileReader(target_id);\n                        reader.onloadend = function () {\n                            try {\n                                preview.src = reader.result;\n                                setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                            } catch (ex) {\n                                console.log(ex);\n                            }\n                        };\n                        if (file) {\n                            reader.readAsDataURL(file);\n                        }\n                    }\n                })(this);\n\n                if (cfg.on_event) {\n                    var that = {\n                        action: \"fileselect\",\n                        file: file\n                    };\n                    cfg.on_event.call(that, that);\n                }\n\n                /// 파일 선택하면 업로드\n                // if(file) this.upload(file);\n            };\n\n            var __old_upload = function __old_upload() {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({ display: \"block\" });\n                progress_bar.css({ width: '0%' });\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                } else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({ width: U.number(e.loaded / e.total * 100, { round: 2 }) + '%' });\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({ display: \"none\" });\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData); // multipart/form-data\n            };\n\n            var bindEvent = function bindEvent() {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n            };\n\n            var alignLayout = function alignLayout() {\n                var box = this.$fileSelector.position();\n                box.width = this.$fileSelector.outerWidth();\n                box.height = this.$fileSelector.outerHeight();\n                this.$inputFile.css(box);\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n                /// controller 수집\n                this.$uploadControler = this.$target.find('[data-ax5uploader-button=\"control\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery('<input type=\"file\" />');\n                this.$target.append(this.$inputFile);\n\n                // align\n                alignLayout.call(this);\n\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n})();\n\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(TOAST.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                file_types: \"*/*\"\n            };\n\n            /// 업로드된 파일 큐\n            this.queue = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 전송버튼\n            this.$uploadControler = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            let __request_select_file = function () {\n                if (cfg.before_select_file) {\n                    if (!cfg.before_select_file.call()) {\n                        return false; // 중지\n                    }\n                }\n\n                if (window.imagePicker) {\n                    window.imagePicker.getPictures(\n                        function (results) {\n                            for (var i = 0; i < results.length; i++) {\n                                console.log('Image URI: ' + results[i]);\n                            }\n                            _this.__on_select_file(results);\n                        }, function (error) {\n                            console.log('Error: ' + error);\n                        }\n                    );\n                } else {\n                    this.els[\"input-file\"].trigger(\"click\");\n                }\n            };\n\n            let __old_select_file = function (evt) {\n                var file,\n                    target_id = this.target.id,\n                    preview = this.els[\"preview-img\"].get(0);\n\n                if ('dataTransfer' in evt) {\n                    file = evt.dataTransfer.files[0];\n                }\n                else if ('target' in evt) {\n                    file = evt.target.files[0];\n                }\n                else if (evt) {\n                    file = evt[0];\n                }\n\n                if (!file) return false;\n                // todo : size over check\n\n                this.selected_file = file;\n                // 선택된 이미지 프리뷰 기능\n                (function (root) {\n                    root.els[\"preview-img\"].css({display: \"block\"});\n\n                    function setcss_preview(img, box_width, box_height) {\n                        var css = {};\n\n                        var image = new Image();\n                        image.src = img.src;\n                        image.onload = function () {\n                            // access image size here\n                            //console.log(this.width, this.height);\n                            if (this.width > this.height) { // 가로형\n                                if (this.height > box_height) {\n                                    css = {\n                                        width: this.width * (box_height / this.height), height: box_height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                                else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                            }\n                            else { // 세로형\n                                if (this.width > box_width) {\n                                    css = {\n                                        height: this.height * (box_width / this.width), width: box_width\n                                    };\n                                    css.top = (box_height - css.height) / 2;\n                                }\n                                else {\n                                    css = {\n                                        width: this.width, height: this.height\n                                    };\n                                    css.left = (box_width - css.width) / 2;\n                                }\n                            }\n                            console.log(css);\n                            root.els[\"preview-img\"].css(css);\n                        };\n                    }\n\n                    if (window.imagePicker) {\n                        preview.src = file;\n                        setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                    } else {\n                        var reader = new FileReader(target_id);\n                        reader.onloadend = function () {\n                            try {\n                                preview.src = reader.result;\n                                setcss_preview(preview, root.els[\"container\"].width(), root.els[\"container\"].height());\n                            } catch (ex) {\n                                console.log(ex);\n                            }\n                        };\n                        if (file) {\n                            reader.readAsDataURL(file);\n                        }\n                    }\n                })(this);\n\n                if (cfg.on_event) {\n                    var that = {\n                        action: \"fileselect\",\n                        file: file\n                    };\n                    cfg.on_event.call(that, that);\n                }\n\n                /// 파일 선택하면 업로드\n                // if(file) this.upload(file);\n            };\n\n            let __old_upload = function () {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({display: \"block\"});\n                progress_bar.css({width: '0%'});\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                }\n                else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({width: U.number((e.loaded / e.total) * 100, {round: 2}) + '%'});\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({display: \"none\"});\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData);  // multipart/form-data\n            };\n\n            let bindEvent = function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n            };\n\n            let alignLayout = function () {\n                var box = this.$fileSelector.position();\n                box.width = this.$fileSelector.outerWidth();\n                box.height = this.$fileSelector.outerHeight();\n                this.$inputFile.css(box);\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n                /// controller 수집\n                this.$uploadControler = this.$target.find('[data-ax5uploader-button=\"control\"]');\n\n                if(this.$fileSelector.length === 0){\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n                \n                // input file 추가\n                this.$inputFile = jQuery('<input type=\"file\" />');\n                this.$target.append(this.$inputFile);\n                \n                // align\n                alignLayout.call(this);\n\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n})();\n","// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function(columnKeys) {\n        return `\n        `;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(TOAST.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}