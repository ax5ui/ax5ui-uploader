{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","version","ax5uploader","self","this","cfg","instanceId","getGuid","config","clickEventName","theme","lang","upload","abort","uploadedBox","columnKeys","name","type","size","uploadedName","uploadedPath","downloadPath","previewPath","thumbnail","animateTime","accept","multiple","manualUpload","progressBox","defaultBtns","label","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","$uploadedBox","__uploading","selectedFiles","selectedFilesTotal","__loaded","bound_onStateChanged","that","onStateChanged","call","bind","bound_onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","path","value","length","toArray","bound_openProgressBox","send","bound_bindEvent","off","on","trigger","get","$this","jQuery","cellType","attr","uploadedItemIndex","Number","parents","onclick","fileIndex","e","isItemCell","findParentNode","console","log","hasAttribute","addEventListener","stopEvent","removeClass","window","event","bound_alignLayout","bound_alignProgressBox","append","_alignProgressBox","$window","$body","document","body","pos","positionMargin","dim","pickerDim","pickerDirection","$progressBox","parent","position","offset","width","outerWidth","height","outerHeight","winWidth","Math","max","winHeight","direction","top","positionCSS","css","left","$progressBoxArrow","viewport","selector","act","getAttribute","processor","setTimeout","$progressUpload","removeAttr","$progressAbort","state","bound_closeProgressBox","remove","bound_startUpload","html5","uploadFile","shift","bound_uploadComplete","formData","FormData","find","each","form","fileName","xhr","XMLHttpRequest","open","action","onload","res","response","parseJson","debug","error","bound_uploaded","onprogress","bound_updateProgressBar","isFunction","loaded","total","$iframe","load","doc","contentWindow","contentDocument","root","documentElement","result","textContent","innerText","JSON","parse","submit","filesTotal","forEach","n","$progressBar","number","round","lengthComputable","push","bound_repaintUploadedBox","onuploaded","onuploadComplete","bound_cancelUpload","html","tmpl","icon","init","_config","extend","dropZone","data","isObject","getError","btns","setUploadedFiles","_files","isArray","removeFile","_index","isNaN","splice","removeFileAll","main","uploader_instance","arguments","setConfig","apply","uploader","uploadProgress","inputFile","inputFileForm","upoadedBox","tmplName","text","render","byte","mustache"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": { label: this.config.lang[\"upload\"], theme: \"btn-primary\" },\n                \"abort\": { label: this.config.lang[\"abort\"], theme: this.config.theme }\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            var bound_onStateChanged = function (that) {\n\n                var state = {\n                    \"open\": function open() {},\n                    \"close\": function close() {},\n                    \"upload\": function upload() {}\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            }.bind(this);\n\n            var bound_onSelectFile = function (_evt) {\n                var files = void 0;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                    // input file에 multiple 지원 안됨 그러므로 단일 파일 처리만 하면 됨.\n                    files = { path: _evt.target.value };\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    bound_openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            }.bind(this);\n\n            var bound_bindEvent = function () {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    bound_onSelectFile(_evt);\n                }.bind(this));\n\n                (function () {\n                    if (!this.$uploadedBox || !this.$uploadedBox.get(0)) return false;\n\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        var $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = Number($this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item')),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n                }).call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    if (!this.$dropZone || !this.$dropZone.get(0)) return false;\n\n                    var timer = void 0;\n\n                    this.$dropZone.on(\"click\", function (e) {\n                        //console.log(e.target.getAttribute(\"data-ax5uploader-dropzone\"));\n                        var isItemCell = ax5.util.findParentNode(e.target, function (target) {\n                            console.log(target);\n                            if (target.hasAttribute(\"data-uploaded-item-cell\") || target.hasAttribute(\"data-ax5uploader-uploaded-item\")) {\n                                return true;\n                            }\n                        });\n\n                        if (!isItemCell) {\n                            // dropZone click\n                            self.$inputFile.trigger(\"click\");\n                        }\n                    });\n\n                    this.$dropZone.get(0).addEventListener('dragover', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.addClass(\"dragover\");\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('dragleave', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.removeClass(\"dragover\");\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('drop', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.removeClass(\"dragover\");\n                        bound_onSelectFile(e || window.event);\n                    }, false);\n                }).call(this);\n            }.bind(this);\n\n            var bound_alignLayout = function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            }.bind(this);\n\n            var bound_alignProgressBox = function (append) {\n                var _alignProgressBox = function _alignProgressBox() {\n                    var $window = jQuery(window),\n                        $body = jQuery(document.body);\n                    var pos = {},\n                        positionMargin = 6,\n                        dim = {},\n                        pickerDim = {},\n                        pickerDirection = void 0;\n\n                    // cfg.viewport.selector\n\n                    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox.addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    var positionCSS = function () {\n                        var css = { left: 0, top: 0 };\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    }();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox.css(positionCSS);\n                };\n\n                this.$progressBox.css({ top: -999 });\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox.off(\"click.ax5uploader\").on(\"click.ax5uploader\", \"button\", function (_evt) {\n                        var act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                        var processor = {\n                            \"upload\": function upload() {\n                                this.send();\n                            },\n                            \"abort\": function abort() {\n                                this.abort();\n                            }\n                        };\n                        if (processor[act]) processor[act].call(this);\n                    }.bind(this));\n                }\n\n                setTimeout(function () {\n                    _alignProgressBox.call(this);\n                }.bind(this));\n            }.bind(this);\n\n            var bound_openProgressBox = function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                bound_alignProgressBox(\"append\");\n\n                // state change\n                bound_onStateChanged({\n                    self: this,\n                    state: \"open\"\n                });\n            }.bind(this);\n\n            var bound_closeProgressBox = function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout(function () {\n                    this.$progressBox.remove();\n                }.bind(this), cfg.animateTime);\n            }.bind(this);\n\n            var bound_startUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n\n                        var uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            bound_uploadComplete();\n                            return this;\n                        }\n\n                        var formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            var res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                return false;\n                            }\n\n                            bound_uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            bound_updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData); // multipart/form-data\n                    },\n                    \"form\": function form() {\n\n                        /// i'm busy\n                        this.__uploading = true;\n\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        var $iframe = jQuery('<iframe src=\"javascript:false;\" name=\"ax5uploader-' + this.instanceId + '-iframe\" style=\"display:none;\"></iframe>');\n                        jQuery(document.body).append($iframe);\n\n                        // onload 이벤트 핸들러\n                        // action에서 파일을 받아 처리한 결과값을 텍스트로 출력한다고 가정하고 iframe의 내부 데이터를 결과값으로 callback 호출\n                        $iframe.load(function () {\n                            var doc = this.contentWindow ? this.contentWindow.document : this.contentDocument ? this.contentDocument : this.document,\n                                root = doc.documentElement ? doc.documentElement : doc.body,\n                                result = root.textContent ? root.textContent : root.innerText,\n                                res = void 0;\n\n                            try {\n                                res = JSON.parse(result);\n                            } catch (e) {\n                                res = {\n                                    error: \"Syntax error\",\n                                    body: result\n                                };\n                            }\n\n                            if (cfg.debug) console.log(res);\n                            if (res.error) {\n                                console.log(res);\n                            } else {\n                                bound_uploaded(res);\n                                //$frameUpload.remove();\n                            }\n                        });\n\n                        this.$inputFileForm.attr(\"target\", 'ax5uploader-' + this.instanceId + '-iframe').attr(\"action\", cfg.form.action).submit();\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    var filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n            }.bind(this);\n\n            var bound_updateProgressBar = function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({ width: U.number(this.__loaded / this.selectedFilesTotal * 100, { round: 2 }) + '%' });\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {}\n                }\n            }.bind(this);\n\n            var bound_uploaded = function (res) {\n                if (cfg.debug) console.log(res);\n                this.uploadedFiles.push(res);\n                bound_repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }.bind(this);\n\n            var bound_uploadComplete = function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n            }.bind(this);\n\n            var bound_cancelUpload = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function form() {}\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n\n                this.$inputFile.get(0).value = \"\";\n                console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }.bind(this);\n\n            var bound_repaintUploadedBox = function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(UPLOADER.tmpl.get(\"upoadedBox\", {\n                    uploadedFiles: this.uploadedFiles,\n                    icon: cfg.uploadedBox.icon,\n                    lang: cfg.uploadedBox.lang\n                }, cfg.uploadedBox.columnKeys));\n            }.bind(this);\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                    this.$dropZone.attr(\"data-ax5uploader-dropzone\", this.instanceId);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept,\n                    name: cfg.form.fileName\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                bound_alignLayout();\n                // 파일버튼 등에 이벤트 연결.\n                bound_bindEvent();\n\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.send\n             * @returns {ax5uploader}\n             *\n             */\n            this.send = function () {\n                return function () {\n                    // 업로드 시작\n                    bound_startUpload();\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5uploader.abort\n             * @returns {ax5uploader}\n             */\n            this.abort = function () {\n                return function () {\n                    bound_cancelUpload();\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5uploader.setUploadedFiles\n             * @param {Array} _files - JSON formatting can all be overridden in columnKeys.\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * var upload1 = new ax5.ui.uploader();\n             * upload1.setConfig({\n             *  ...\n             * });\n             *\n             *\n             * $.ajax({\n             *     url: \"api/fileListLoad.php\",\n             *     success: function (res) {\n             *         // res JSON format\n             *         // [{\n             *         // \"name\": \"barcode-scan-ani.gif\",\n             *         // \"saveName\": \"barcode-scan-ani.gif\",\n             *         // \"type\": \"file\",\n             *         // \"fileSize\": \"3891664\",\n             *         // \"uploadedPath\": \"/ax5ui-uploader/test/api/files\",\n             *         // \"thumbUrl\": \"\"\n             *         // }]\n             *         upload1.setUploadedFiles(res);\n             *     }\n             * });\n             * ```\n             */\n            this.setUploadedFiles = function (_files) {\n                if (U.isArray(_files)) {\n                    this.uploadedFiles = _files;\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Removes the object corresponding to the index passed to the argument from uploadedFiles.\n             * @method ax5uploader.removeFile\n             * @param {Number} _index\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * // The actual file is not deleted\n             * upload1.removeFile(fileIndex);\n             * ```\n             */\n            this.removeFile = function (_index) {\n                if (!isNaN(Number(_index))) {\n                    this.uploadedFiles.splice(_index, 1);\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Empty uploadedFiles\n             * @method ax5uploader.removeFileAll\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.removeFileAll = function () {\n                this.uploadedFiles = [];\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n// todo :\n// html5용 업로드 - 구현완료\n// abort, 여러개의 파일이 올라가는 중간에 abort 하면 업로드된 파일은 두고. 안올라간 파일만 중지 -- ok\n// set uploded files\n// uploaded files display, needs columnKeys\n// delete file\n\n// dropFile support\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" name=\\\"{{name}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    var progressBox = function progressBox(columnKeys) {\n        return \"\\n<div data-ax5uploader-progressbox=\\\"{{instanceId}}\\\" class=\\\"{{theme}}\\\">\\n    <div class=\\\"ax-progressbox-body\\\">\\n        <div class=\\\"ax-pregressbox-content\\\">\\n            <div class=\\\"progress\\\">\\n              <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" style=\\\"width: 0\\\">\\n                <span class=\\\"sr-only\\\">0% Complete</span>\\n              </div>\\n            </div>\\n        </div>\\n        {{#btns}}\\n            <div class=\\\"ax-progressbox-buttons\\\">\\n            {{#btns}}\\n                {{#@each}}\\n                <button data-pregressbox-btn=\\\"{{@key}}\\\" class=\\\"btn btn-default {{@value.theme}}\\\">{{@value.label}}</button>\\n                {{/@each}}\\n            {{/btns}}\\n            </div>\\n        {{/btns}}\\n    </div>\\n    <div class=\\\"ax-progressbox-arrow\\\"></div>\\n</div>\\n\";\n    };\n\n    var upoadedBox = function upoadedBox(columnKeys) {\n        return \"\\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\\\"{{@i}}\\\">\\n    <div class=\\\"uploaded-item-holder\\\">\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"download\\\">{{{icon.download}}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filename\\\">{{\" + columnKeys.name + \"}}</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"filesize\\\">({{#@fn_get_byte}}{{\" + columnKeys.size + \"}}{{/@fn_get_byte}})</div>\\n        <div class=\\\"uploaded-item-cell\\\" data-uploaded-item-cell=\\\"delete\\\">{{{icon.delete}}}</div>\\n    </div>\\n</div>{{/uploadedFiles}}\\n{{^uploadedFiles}}\\n{{{lang.emptyList}}}\\n{{/uploadedFiles}}\\n\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function get(tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function () {\n                return function (text, render) {\n                    return ax5.util.number(render(text), { round: 2, byte: true });\n                };\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            let self = this, cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                uploadedBox: {\n                    columnKeys: {\n                        name: \"name\",\n                        type: \"type\",\n                        size: \"size\",\n                        uploadedName: \"uploadedName\",\n                        uploadedPath: \"uploadedPath\",\n                        downloadPath: \"downloadPath\",\n                        previewPath: \"previewPath\",\n                        thumbnail: \"thumbnail\"\n                    }\n                },\n                animateTime: 100,\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": {label: this.config.lang[\"upload\"], theme: \"btn-primary\"},\n                \"abort\": {label: this.config.lang[\"abort\"], theme: this.config.theme}\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            /// 파일 목록 표시박스\n            this.$uploadedBox = null;\n\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            /**\n             * UI 상태변경 이벤트 처리자\n             * UI의 상태변경 : open, close, upload 등의 변경사항이 발생되면 onStateChanged 함수를 후출하여 이벤트를 처리\n             */\n            let bound_onStateChanged = (function (that) {\n\n                let state = {\n                    \"open\": function () {\n\n                    },\n                    \"close\": function () {\n\n                    },\n                    \"upload\": function () {\n\n                    }\n                };\n\n                if (cfg.onStateChanged) {\n                    cfg.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            }).bind(this);\n\n            let bound_onSelectFile = (function (_evt) {\n                let files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                    // input file에 multiple 지원 안됨 그러므로 단일 파일 처리만 하면 됨.\n                    files = {path: _evt.target.value};\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    bound_openProgressBox();\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            }).bind(this);\n\n            let bound_bindEvent = (function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        bound_onSelectFile(_evt);\n                    }).bind(this));\n\n                (function () {\n                    if (!this.$uploadedBox || !this.$uploadedBox.get(0)) return false;\n\n                    this.$uploadedBox.on(\"click\", \"[data-uploaded-item-cell]\", function () {\n                        let $this = jQuery(this),\n                            cellType = $this.attr(\"data-uploaded-item-cell\"),\n                            uploadedItemIndex = Number($this.parents('[data-ax5uploader-uploaded-item]').attr('data-ax5uploader-uploaded-item')),\n                            that = {};\n\n                        if (cfg.uploadedBox && cfg.uploadedBox.onclick) {\n                            that = {\n                                self: self,\n                                cellType: cellType,\n                                uploadedFiles: self.uploadedFiles,\n                                fileIndex: uploadedItemIndex\n                            };\n                            cfg.uploadedBox.onclick.call(that, that);\n                        }\n\n                        $this = null;\n                        cellType = null;\n                        uploadedItemIndex = null;\n                        that = null;\n                    });\n                }).call(this);\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    if (!this.$dropZone || !this.$dropZone.get(0)) return false;\n\n                    let timer;\n\n                    this.$dropZone\n                        .on(\"click\", function (e) {\n                            //console.log(e.target.getAttribute(\"data-ax5uploader-dropzone\"));\n                            let isItemCell = ax5.util.findParentNode(e.target, function (target) {\n                                console.log(target);\n                                if (target.hasAttribute(\"data-uploaded-item-cell\") || target.hasAttribute(\"data-ax5uploader-uploaded-item\")) {\n                                    return true;\n                                }\n                            });\n\n                            if (!isItemCell) {\n                                // dropZone click\n                                self.$inputFile.trigger(\"click\");\n                            }\n                        });\n\n\n                    this.$dropZone.get(0).addEventListener('dragover', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.addClass(\"dragover\");\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('dragleave', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.removeClass(\"dragover\");\n                    }, false);\n\n                    this.$dropZone.get(0).addEventListener('drop', function (e) {\n                        U.stopEvent(e);\n                        self.$dropZone.removeClass(\"dragover\");\n                        bound_onSelectFile(e || window.event);\n                    }, false);\n\n                }).call(this);\n            }).bind(this);\n\n            let bound_alignLayout = (function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            }).bind(this);\n\n            let bound_alignProgressBox = (function (append) {\n                let _alignProgressBox = function () {\n                    let $window = jQuery(window), $body = jQuery(document.body);\n                    let pos = {}, positionMargin = 6,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    // cfg.viewport.selector\n\n                    pos = (this.$progressBox.parent().get(0) == this.$target.get(0)) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    let positionCSS = (function () {\n                        let css = {left: 0, top: 0};\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    })();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox\n                        .css(positionCSS);\n                };\n\n                this.$progressBox.css({top: -999});\n                if (append) {\n                    // progressBox를 append 할 타겟 엘리먼트 펀단 후 결정.\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n\n                    // progressBox 버튼에 이벤트 연결.\n                    this.$progressBox\n                        .off(\"click.ax5uploader\")\n                        .on(\"click.ax5uploader\", \"button\", (function (_evt) {\n                            let act = _evt.target.getAttribute(\"data-pregressbox-btn\");\n                            let processor = {\n                                \"upload\": function () {\n                                    this.send();\n                                },\n                                \"abort\": function () {\n                                    this.abort();\n                                }\n                            };\n                            if (processor[act]) processor[act].call(this);\n                        }).bind(this));\n                }\n\n                setTimeout((function () {\n                    _alignProgressBox.call(this);\n                }).bind(this));\n            }).bind(this);\n\n            let bound_openProgressBox = (function () {\n                this.$progressBox.removeClass(\"destroy\");\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n\n                // apend & align progress box\n                bound_alignProgressBox(\"append\");\n\n                // state change\n                bound_onStateChanged({\n                    self: this,\n                    state: \"open\"\n                });\n            }).bind(this);\n\n            let bound_closeProgressBox = (function () {\n                this.$progressBox.addClass(\"destroy\");\n                setTimeout((function () {\n                    this.$progressBox\n                        .remove();\n                }).bind(this), cfg.animateTime);\n            }).bind(this);\n\n            let bound_startUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n\n                        let uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            bound_uploadComplete();\n                            return this;\n                        }\n\n                        let formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            let res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                return false;\n                            }\n                            if (cfg.debug) console.log(res);\n\n                            if (res.error) {\n                                if (cfg.debug) console.log(res.error);\n                                return false;\n                            }\n\n                            bound_uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            bound_updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData);  // multipart/form-data\n\n                    },\n                    \"form\": function () {\n\n                        /// i'm busy\n                        this.__uploading = true;\n\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        let $iframe = jQuery('<iframe src=\"javascript:false;\" name=\"ax5uploader-' + this.instanceId + '-iframe\" style=\"display:none;\"></iframe>');\n                        jQuery(document.body).append($iframe);\n\n\n                        // onload 이벤트 핸들러\n                        // action에서 파일을 받아 처리한 결과값을 텍스트로 출력한다고 가정하고 iframe의 내부 데이터를 결과값으로 callback 호출\n                        $iframe.load(function () {\n                            let doc = this.contentWindow ? this.contentWindow.document : (this.contentDocument ? this.contentDocument : this.document),\n                                root = doc.documentElement ? doc.documentElement : doc.body,\n                                result = root.textContent ? root.textContent : root.innerText,\n                                res;\n\n                            try {\n                                res = JSON.parse(result);\n                            } catch (e) {\n                                res = {\n                                    error: \"Syntax error\",\n                                    body: result\n                                };\n                            }\n\n                            if (cfg.debug) console.log(res);\n                            if (res.error) {\n                                console.log(res);\n                            }\n                            else {\n                                bound_uploaded(res);\n                                //$frameUpload.remove();\n                            }\n                        });\n\n                        this.$inputFileForm\n                            .attr(\"target\", 'ax5uploader-' + this.instanceId + '-iframe')\n                            .attr(\"action\", cfg.form.action)\n                            .submit();\n                    }\n                };\n\n                if (this.__uploading === false) {\n                    // 전체 파일 사이즈 구하기\n                    let filesTotal = 0;\n                    this.selectedFiles.forEach(function (n) {\n                        filesTotal += n.size;\n                    });\n                    this.selectedFilesTotal = filesTotal;\n                    this.__loaded = 0;\n\n                    this.__uploading = true; // 업로드 시작 상태 처리\n                    this.$progressUpload.attr(\"disabled\", \"disabled\");\n                    this.$progressAbort.removeAttr(\"disabled\");\n                }\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n            }).bind(this);\n\n            let bound_updateProgressBar = (function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({width: U.number(this.__loaded / this.selectedFilesTotal * 100, {round: 2}) + '%'});\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {\n\n                    }\n                }\n            }).bind(this);\n\n            let bound_uploaded = (function (res) {\n                if (cfg.debug) console.log(res);\n                this.uploadedFiles.push(res);\n                bound_repaintUploadedBox(); // 업로드된 파일 출력\n\n                if (U.isFunction(cfg.onuploaded)) {\n                    cfg.onuploaded.call({\n                        self: this\n                    }, res);\n                }\n            }).bind(this);\n\n            let bound_uploadComplete = (function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n                if (U.isFunction(cfg.onuploadComplete)) {\n                    cfg.onuploadComplete.call({\n                        self: this\n                    });\n                }\n                // update uploadedFiles display\n            }).bind(this);\n\n            let bound_cancelUpload = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n                        if (this.xhr) {\n                            this.xhr.abort();\n                        }\n                    },\n                    \"form\": function () {\n\n                    }\n                };\n\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n\n                processor[ax5.info.supportFileApi ? \"html5\" : \"form\"].call(this);\n\n                if (cfg.progressBox) {\n                    bound_closeProgressBox();\n                }\n\n                this.$inputFile.get(0).value = \"\";\n                console.log(\"cancelUpload\");\n                // update uploadedFiles display\n            }).bind(this);\n\n            let bound_repaintUploadedBox = (function () {\n                // uploadedBox 가 없다면 아무일도 하지 않음.\n                // onuploaded 함수 이벤트를 이용하여 개발자가 직접 업로드디 박스를 구현 한다고 이해 하자.\n                if (this.$uploadedBox === null) return this;\n\n                this.$uploadedBox.html(\n                    UPLOADER.tmpl.get(\"upoadedBox\", {\n                        uploadedFiles: this.uploadedFiles,\n                        icon: cfg.uploadedBox.icon,\n                        lang: cfg.uploadedBox.lang\n                    }, cfg.uploadedBox.columnKeys)\n                );\n\n            }).bind(this);\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                    this.$dropZone\n                        .attr(\"data-ax5uploader-dropzone\", this.instanceId);\n                }\n\n                // uploadedBox 옵션 사항\n                if (cfg.uploadedBox && cfg.uploadedBox.target) {\n                    this.$uploadedBox = jQuery(cfg.uploadedBox.target);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept,\n                    name: cfg.form.fileName\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                bound_alignLayout();\n                // 파일버튼 등에 이벤트 연결.\n                bound_bindEvent();\n\n                return this;\n            };\n\n            /**\n             * @method ax5uploader.send\n             * @returns {ax5uploader}\n             *\n             */\n            this.send = (function () {\n                return function () {\n                    // 업로드 시작\n                    bound_startUpload();\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5uploader.abort\n             * @returns {ax5uploader}\n             */\n            this.abort = (function () {\n                return function () {\n                    bound_cancelUpload();\n                    return this;\n                };\n            })();\n\n            /**\n             * @method ax5uploader.setUploadedFiles\n             * @param {Array} _files - JSON formatting can all be overridden in columnKeys.\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * var upload1 = new ax5.ui.uploader();\n             * upload1.setConfig({\n             *  ...\n             * });\n             *\n             *\n             * $.ajax({\n             *     url: \"api/fileListLoad.php\",\n             *     success: function (res) {\n             *         // res JSON format\n             *         // [{\n             *         // \"name\": \"barcode-scan-ani.gif\",\n             *         // \"saveName\": \"barcode-scan-ani.gif\",\n             *         // \"type\": \"file\",\n             *         // \"fileSize\": \"3891664\",\n             *         // \"uploadedPath\": \"/ax5ui-uploader/test/api/files\",\n             *         // \"thumbUrl\": \"\"\n             *         // }]\n             *         upload1.setUploadedFiles(res);\n             *     }\n             * });\n             * ```\n             */\n            this.setUploadedFiles = function (_files) {\n                if (U.isArray(_files)) {\n                    this.uploadedFiles = _files;\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Removes the object corresponding to the index passed to the argument from uploadedFiles.\n             * @method ax5uploader.removeFile\n             * @param {Number} _index\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             * // The actual file is not deleted\n             * upload1.removeFile(fileIndex);\n             * ```\n             */\n            this.removeFile = function (_index) {\n                if (!isNaN(Number(_index))) {\n                    this.uploadedFiles.splice(_index, 1);\n                }\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            /**\n             * Empty uploadedFiles\n             * @method ax5uploader.removeFileAll\n             * @returns {ax5uploader}\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            this.removeFileAll = function () {\n                this.uploadedFiles = [];\n                bound_repaintUploadedBox();\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n\n// todo :\n// html5용 업로드 - 구현완료\n// abort, 여러개의 파일이 올라가는 중간에 abort 하면 업로드된 파일은 두고. 안올라간 파일만 중지 -- ok\n// set uploded files\n// uploaded files display, needs columnKeys\n// delete file\n\n// dropFile support","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function (columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" name=\"{{name}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    let progressBox = function (columnKeys) {\n        return `\n<div data-ax5uploader-progressbox=\"{{instanceId}}\" class=\"{{theme}}\">\n    <div class=\"ax-progressbox-body\">\n        <div class=\"ax-pregressbox-content\">\n            <div class=\"progress\">\n              <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" style=\"width: 0\">\n                <span class=\"sr-only\">0% Complete</span>\n              </div>\n            </div>\n        </div>\n        {{#btns}}\n            <div class=\"ax-progressbox-buttons\">\n            {{#btns}}\n                {{#@each}}\n                <button data-pregressbox-btn=\"{{@key}}\" class=\"btn btn-default {{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        {{/btns}}\n    </div>\n    <div class=\"ax-progressbox-arrow\"></div>\n</div>\n`;\n    };\n\n    let upoadedBox = function (columnKeys) {\n        return `\n{{#uploadedFiles}}<div data-ax5uploader-uploaded-item=\"{{@i}}\">\n    <div class=\"uploaded-item-holder\">\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"download\">{{{icon.download}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filename\">{{${columnKeys.name}}}</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"filesize\">({{#@fn_get_byte}}{{${columnKeys.size}}}{{/@fn_get_byte}})</div>\n        <div class=\"uploaded-item-cell\" data-uploaded-item-cell=\"delete\">{{{icon.delete}}}</div>\n    </div>\n</div>{{/uploadedFiles}}\n{{^uploadedFiles}}\n{{{lang.emptyList}}}\n{{/uploadedFiles}}\n`;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n        \"upoadedBox\": upoadedBox,\n\n        get: function (tmplName, data, columnKeys) {\n            data[\"@fn_get_byte\"] = function() {\n                return function (text, render) {\n                    return ax5.util.number(render(text), {round: 2, byte: true});\n                }\n            };\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}