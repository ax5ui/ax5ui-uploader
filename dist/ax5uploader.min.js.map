{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","version","ax5uploader","self","this","cfg","instanceId","getGuid","config","clickEventName","theme","lang","upload","abort","accept","multiple","manualUpload","progressBox","defaultBtns","label","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","__uploading","selectedFiles","selectedFilesTotal","__loaded","onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","length","toArray","openProgressBox","call","send","bindEvent","off","on","trigger","bind","$progressBox","console","log","alignLayout","alignProgressBox","append","_alignProgressBox","$window","jQuery","window","$body","document","body","pos","positionMargin","dim","pickerDim","pickerDirection","parent","get","position","offset","width","outerWidth","height","outerHeight","winWidth","Math","max","winHeight","direction","top","positionCSS","css","left","$progressBoxArrow","viewport","selector","setTimeout","startUpload","$progressUpload","attr","$progressAbort","removeAttr","updateProgressBar","e","loaded","$progressBar","number","round","lengthComputable","total","uploaded","res","uploadComplete","init","_config","extend","dropZone","data","isObject","error","parseJson","find","getError","tmpl","btns","processor","html5","uploadFile","shift","formData","FormData","each","name","value","form","fileName","xhr","XMLHttpRequest","open","action","onload","response","onprogress","isFunction","formSubmit","iframe","$","filesTotal","forEach","n","size","main","uploader_instance","push","arguments","setConfig","apply","uploader","uploadProgress","columnKeys","inputFile","inputFileForm","tmplName","mustache","render"],"mappings":"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","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": { label: this.config.lang[\"upload\"], theme: \"btn-primary\" },\n                \"abort\": { label: this.config.lang[\"abort\"], theme: this.config.theme }\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            var onSelectFile = function onSelectFile(_evt) {\n                var files = void 0;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    openProgressBox.call(this);\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            };\n\n            var bindEvent = function bindEvent() {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    onSelectFile.call(this, _evt);\n                }.bind(this));\n\n                this.$progressBox.off(\"click.ax5uploader\").on(\"click.ax5uploader\", \"button\", function (_evt) {\n                    console.log(\"click btn\");\n                }.bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            var alignLayout = function alignLayout() {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            var alignProgressBox = function alignProgressBox(append) {\n                var _alignProgressBox = function _alignProgressBox() {\n                    var $window = jQuery(window),\n                        $body = jQuery(document.body);\n                    var pos = {},\n                        positionMargin = 6,\n                        dim = {},\n                        pickerDim = {},\n                        pickerDirection = void 0;\n\n                    // cfg.viewport.selector\n\n                    pos = this.$progressBox.parent().get(0) == this.$target.get(0) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox.addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    var positionCSS = function () {\n                        var css = { left: 0, top: 0 };\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    }();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({ left: pos.left + dim.width / 2 - positionCSS.left });\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox.css(positionCSS);\n                };\n\n                this.$progressBox.css({ top: -999 });\n                if (append) {\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n                }\n                setTimeout(function () {\n                    _alignProgressBox.call(this);\n                }.bind(this));\n            };\n\n            var openProgressBox = function openProgressBox() {\n                alignProgressBox.call(this, \"append\");\n                if (cfg.manualUpload) {} else {\n                    // 자동 업로드 이면.\n                }\n            };\n\n            var startUpload = function () {\n                this.__uploading = true; // 업로드 시작 상태 처리\n                this.$progressUpload.attr(\"disabled\", \"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n            }.bind(this);\n\n            var updateProgressBar = function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({ width: U.number(this.__loaded / this.selectedFilesTotal * 100, { round: 2 }) + '%' });\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {}\n                }\n            }.bind(this);\n\n            var uploaded = function (res) {\n                console.log(res);\n            }.bind(this);\n\n            var uploadComplete = function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n            }.bind(this);\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n            };\n\n            /**\n             * @method ax5uploader.send\n             *\n             */\n            this.send = function () {\n\n                var processor = {\n                    \"html5\": function html5() {\n\n                        var uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            uploadComplete();\n                            return this;\n                        }\n\n                        var formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            var res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                console.log(e);\n                                return false;\n                            }\n                            if (res.error) {\n                                console.log(res.error);\n                                return false;\n                            }\n                            uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData); // multipart/form-data\n                    },\n                    \"formSubmit\": function formSubmit() {\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        // iframe 생성\n                        var iframe = $('<iframe src=\"javascript:false;\" name=\"\" style=\"display:none;\"></iframe>');\n                        // form 생성.\n\n                        $(document.body).append(iframe);\n                    }\n                };\n\n                return function () {\n                    if (this.__uploading === false) {\n                        // 전체 파일 사이즈 구하기\n                        var filesTotal = 0;\n                        this.selectedFiles.forEach(function (n) {\n                            filesTotal += n.size;\n                        });\n                        this.selectedFilesTotal = filesTotal;\n                        this.__loaded = 0;\n\n                        // 업로드 시작\n                        startUpload();\n                    }\n                    processor[ax5.info.supportFileApi ? \"html5\" : \"formSubmit\"].call(this);\n                };\n            }();\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    var progressBox = function progressBox(columnKeys) {\n        return \"\\n<div data-ax5uploader-progressbox=\\\"{{instanceId}}\\\" class=\\\"{{theme}}\\\">\\n    <div class=\\\"ax-progressbox-body\\\">\\n        <div class=\\\"ax-pregressbox-content\\\">\\n            <div class=\\\"progress\\\">\\n              <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" style=\\\"width: 0\\\">\\n                <span class=\\\"sr-only\\\">0% Complete</span>\\n              </div>\\n            </div>\\n        </div>\\n        {{#btns}}\\n            <div class=\\\"ax-progressbox-buttons\\\">\\n            {{#btns}}\\n                {{#@each}}\\n                <button data-pregressbox-btn=\\\"{{@key}}\\\" class=\\\"btn btn-default {{@value.theme}}\\\">{{@value.label}}</button>\\n                {{/@each}}\\n            {{/btns}}\\n            </div>\\n        {{/btns}}\\n    </div>\\n    <div class=\\\"ax-progressbox-arrow\\\"></div>\\n</div>\\n\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            /**\n             * @class ax5uploader\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```js\n             *\n             * ```\n             */\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default', // theme of uploader\n                lang: { // 업로더 버튼 랭귀지 설정\n                    \"upload\": \"Upload\",\n                    \"abort\": \"Abort\"\n                },\n                accept: \"*/*\", // 업로드 선택 파일 타입 설정\n                multiple: false, // 다중 파일 업로드\n                manualUpload: false, // 업로딩 시작 수동처리 여부\n                progressBox: true // 업로드 프로그래스 박스 사용여부 false 이면 업로드 진행바를 표시 하지 않습니다. 개발자가 onprogress 함수를 이용하여 직접 구현 해야 합니다.\n            };\n            this.defaultBtns = {\n                \"upload\": {label: this.config.lang[\"upload\"], theme: \"btn-primary\"},\n                \"abort\": {label: this.config.lang[\"abort\"], theme: this.config.theme}\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n            this.__uploading = false;\n            this.selectedFiles = [];\n            this.selectedFilesTotal = 0;\n            this.__loaded = 0;\n\n            cfg = this.config;\n\n            let onSelectFile = function (_evt) {\n                let files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                if (length in files) {\n                    this.selectedFiles = U.toArray(files);\n                } else {\n                    this.selectedFiles = [files];\n                }\n\n                if (cfg.progressBox) {\n                    openProgressBox.call(this);\n                }\n                if (!cfg.manualUpload) {\n                    this.send();\n                }\n            };\n\n            let bindEvent = function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        onSelectFile.call(this, _evt);\n                    }).bind(this));\n\n                this.$progressBox\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", \"button\", (function (_evt) {\n                        console.log(\"click btn\");\n                    }).bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            let alignLayout = function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                 var box = this.$fileSelector.position();\n                 box.width = this.$fileSelector.outerWidth();\n                 box.height = this.$fileSelector.outerHeight();\n                 this.$inputFile.css(box);\n                 */\n            };\n\n            let alignProgressBox = function (append) {\n                let _alignProgressBox = function () {\n                    let $window = jQuery(window), $body = jQuery(document.body);\n                    let pos = {}, positionMargin = 6,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    // cfg.viewport.selector\n\n                    pos = (this.$progressBox.parent().get(0) == this.$target.get(0)) ? this.$fileSelector.position() : this.$fileSelector.offset();\n                    dim = {\n                        width: this.$fileSelector.outerWidth(),\n                        height: this.$fileSelector.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), $body.width()),\n                        winHeight: Math.max($window.height(), $body.height()),\n                        width: this.$progressBox.outerWidth(),\n                        height: this.$progressBox.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!cfg.direction || cfg.direction === \"\" || cfg.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = cfg.direction;\n                    }\n\n                    if (append) {\n                        this.$progressBox\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n\n                    let positionCSS = (function () {\n                        let css = {left: 0, top: 0};\n                        switch (pickerDirection) {\n                            case \"top\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top + dim.height + positionMargin;\n                                break;\n                            case \"bottom\":\n                                css.left = pos.left + dim.width / 2 - pickerDim.width / 2;\n                                css.top = pos.top - pickerDim.height - positionMargin;\n                                break;\n                            case \"left\":\n                                css.left = pos.left + dim.width + positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                            case \"right\":\n                                css.left = pos.left - pickerDim.width - positionMargin;\n                                css.top = pos.top - pickerDim.height / 2 + dim.height / 2;\n                                break;\n                        }\n                        return css;\n                    })();\n\n                    (function () {\n                        if (pickerDirection == \"top\" || pickerDirection == \"bottom\") {\n                            if (positionCSS.left < 0) {\n                                positionCSS.left = positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            } else if (positionCSS.left + pickerDim.width > pickerDim.winWidth) {\n                                positionCSS.left = pickerDim.winWidth - pickerDim.width - positionMargin;\n                                this.$progressBoxArrow.css({left: (pos.left + dim.width / 2) - positionCSS.left});\n                            }\n                        }\n                    }).call(this);\n\n                    this.$progressBox\n                        .css(positionCSS);\n                };\n\n                this.$progressBox.css({top: -999});\n                if (append) {\n                    (function () {\n                        if (cfg.viewport) {\n                            return jQuery(cfg.viewport.selector);\n                        } else {\n                            return this.$target;\n                        }\n                    }).call(this).append(this.$progressBox);\n                }\n                setTimeout((function () {\n                    _alignProgressBox.call(this);\n                }).bind(this));\n            };\n\n            let openProgressBox = function () {\n                alignProgressBox.call(this, \"append\");\n                if (cfg.manualUpload) {\n\n                } else {\n                    // 자동 업로드 이면.\n                }\n            };\n\n            let startUpload = (function () {\n                this.__uploading = true; // 업로드 시작 상태 처리\n                this.$progressUpload.attr(\"disabled\", \"disabled\");\n                this.$progressAbort.removeAttr(\"disabled\");\n            }).bind(this);\n\n            let updateProgressBar = (function (e) {\n                this.__loaded += e.loaded;\n                this.$progressBar.css({width: U.number(this.__loaded / this.selectedFilesTotal * 100, {round: 2}) + '%'});\n                if (e.lengthComputable) {\n                    if (e.loaded >= e.total) {\n\n                    }\n                }\n            }).bind(this);\n\n            let uploaded = (function (res) {\n                console.log(res);\n\n            }).bind(this);\n\n            let uploadComplete = (function () {\n                this.__uploading = false; // 업로드 완료 상태처리\n                this.$progressUpload.removeAttr(\"disabled\");\n                this.$progressAbort.attr(\"disabled\", \"disabled\");\n            }).bind(this);\n\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // btns 확인\n                cfg.btns = jQuery.extend({}, this.defaultBtns, cfg.btns);\n\n                this.$progressBox = jQuery(UPLOADER.tmpl.get.call(this, \"progressBox\", {\n                    instanceId: this.instanceId,\n                    btns: cfg.btns\n                }));\n                this.$progressBar = this.$progressBox.find('[role=\"progressbar\"]');\n                this.$progressBoxArrow = this.$progressBox.find(\".ax-progressbox-arrow\");\n                this.$progressUpload = this.$progressBox.find('[data-pregressbox-btn=\"upload\"]');\n                this.$progressAbort = this.$progressBox.find('[data-pregressbox-btn=\"abort\"]');\n\n                // 레이아웃 정렬\n                alignLayout.call(this);\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n            };\n\n            /**\n             * @method ax5uploader.send\n             *\n             */\n            this.send = (function () {\n\n                let processor = {\n                    \"html5\": function () {\n\n                        let uploadFile = this.selectedFiles.shift();\n                        if (!uploadFile) {\n                            // 업로드 종료\n                            uploadComplete();\n                            return this;\n                        }\n\n                        let formData = new FormData();\n                        //서버로 전송해야 할 추가 파라미터 정보 설정\n\n                        this.$target.find(\"input\").each(function () {\n                            formData.append(this.name, this.value);\n                        });\n                        // 파일 아이템 추가\n                        formData.append(cfg.form.fileName, uploadFile);\n\n                        this.xhr = new XMLHttpRequest();\n                        this.xhr.open(\"post\", cfg.form.action, true);\n\n                        this.xhr.onload = function (e) {\n                            let res = e.target.response;\n                            try {\n                                if (typeof res == \"string\") res = U.parseJson(res);\n                            } catch (e) {\n                                console.log(e);\n                                return false;\n                            }\n                            if (res.error) {\n                                console.log(res.error);\n                                return false;\n                            }\n                            uploaded(res);\n                            self.send();\n                        };\n\n                        this.xhr.upload.onprogress = function (e) {\n                            // console.log(e.loaded, e.total);\n                            updateProgressBar(e);\n                            if (U.isFunction(cfg.onprogress)) {\n                                cfg.onprogress.call({\n                                    loaded: e.loaded,\n                                    total: e.total\n                                }, e);\n                            }\n                        };\n                        this.xhr.send(formData);  // multipart/form-data\n\n                    },\n                    \"formSubmit\": function () {\n                        // 폼과 iframe을 만들어 페이지 아래에 삽입 후 업로드\n                        // iframe 생성\n                        let iframe = $('<iframe src=\"javascript:false;\" name=\"\" style=\"display:none;\"></iframe>');\n                        // form 생성.\n\n                        $(document.body).append(iframe);\n                    }\n                };\n\n                return function () {\n                    if (this.__uploading === false) {\n                        // 전체 파일 사이즈 구하기\n                        let filesTotal = 0;\n                        this.selectedFiles.forEach(function (n) {\n                            filesTotal += n.size;\n                        });\n                        this.selectedFilesTotal = filesTotal;\n                        this.__loaded = 0;\n\n                        // 업로드 시작\n                        startUpload();\n                    }\n                    processor[ax5.info.supportFileApi ? \"html5\" : \"formSubmit\"].call(this);\n                }\n            })();\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function(columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    let progressBox = function (columnKeys) {\n        return `\n<div data-ax5uploader-progressbox=\"{{instanceId}}\" class=\"{{theme}}\">\n    <div class=\"ax-progressbox-body\">\n        <div class=\"ax-pregressbox-content\">\n            <div class=\"progress\">\n              <div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" style=\"width: 0\">\n                <span class=\"sr-only\">0% Complete</span>\n              </div>\n            </div>\n        </div>\n        {{#btns}}\n            <div class=\"ax-progressbox-buttons\">\n            {{#btns}}\n                {{#@each}}\n                <button data-pregressbox-btn=\"{{@key}}\" class=\"btn btn-default {{@value.theme}}\">{{@value.label}}</button>\n                {{/@each}}\n            {{/btns}}\n            </div>\n        {{/btns}}\n    </div>\n    <div class=\"ax-progressbox-arrow\"></div>\n</div>\n`;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n        \"progressBox\": progressBox,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}