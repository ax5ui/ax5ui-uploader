{"version":3,"sources":["ax5uploader.min.js","ax5uploader.js","ax5uploader-tmpl.js"],"names":["UI","ax5","ui","U","util","UPLOADER","addClass","className","version","ax5uploader","cfg","this","instanceId","getGuid","config","clickEventName","theme","accept","multiple","uploadedFiles","$target","$inputContainer","$inputFile","$inputFileForm","$fileSelector","$dropZone","onSelectFile","_evt","files","info","supportFileApi","dataTransfer","target","selectedFiles","console","log","bindEvent","off","on","trigger","bind","call","alignLayout","init","_config","jQuery","extend","dropZone","data","isObject","error","parseJson","attr","append","find","length","getError","tmpl","get","document","body","main","uploader_instance","push","arguments","setConfig","apply","uploader","uploadProgress","columnKeys","inputFile","inputFileForm","tmplName","mustache","render"],"mappings":"AAAA,cCCA,WAEA,GAAAA,GAAAC,IAAAC,GACAC,EAAAF,IAAAG,KACAC,EAAAA,MAEAL,GAAAM,UACAC,UAAA,WACAC,QAAA,cACA,WAEA,GAAAC,GAAA,WACA,GACAC,GAAAA,MAEAC,MAAAC,WAAAX,IAAAY,UACAF,KAAAG,QACAC,eAAA,QACAC,MAAA,UACAC,OAAA,MACAC,UAAA,GAIAP,KAAAQ,iBAEAR,KAAAS,QAAA,KAEAT,KAAAU,gBAAA,KAEAV,KAAAW,WAAA,KACAX,KAAAY,eAAA,KAEAZ,KAAAa,cAAA,KAEAb,KAAAc,UAAA,KAEAf,EAAAC,KAAAG,MAEA,IAAAY,GAAA,SAAAC,GACA,GAAAC,EAeA,OAbA3B,KAAA4B,KAAAC,iBAGA,gBAAAH,GACAC,EAAAD,EAAAI,aAAAH,MAEA,UAAAD,GACAC,EAAAD,EAAAK,OAAAJ,MAEAD,IACAC,EAAAD,MAGAC,IAGAjB,KAAAsB,cAAAL,MAEAM,SAAAC,IAAAxB,KAAAsB,iBAgEAG,EAAA,WACAzB,KAAAa,cACAa,IAAA,qBACAC,GAAA,oBAAA,WACA3B,KAAAW,WAAAiB,QAAA,UACAC,KAAA7B,OAEAA,KAAAW,WACAe,IAAA,sBACAC,GAAA,qBAAA,SAAAX,GACAD,EAAAe,KAAA9B,KAAAgB,IACAa,KAAA7B,OAEA,WAEA,OAAA,GAkCA8B,KAAA9B,OAGA+B,EAAA,YAUA/B,MAAAgC,KAAA,SAAAC,GAEA,MADAlC,GAAAmC,OAAAC,QAAA,KAAApC,EAAAkC,GACAlC,EAAAsB,QAKArB,KAAAS,QAAAyB,OAAAnC,EAAAsB,QAGAtB,EAAAqC,WACApC,KAAAc,UAAAoB,OAAAnC,EAAAqC,WAIA,SAAAC,GACA7C,EAAA8C,SAAAD,KAAAA,EAAAE,QACAxC,EAAAmC,OAAAC,QAAA,EAAApC,EAAAsC,KAEAP,KAAA9B,KAAAR,EAAAgD,UAAAxC,KAAAS,QAAAgC,KAAA,4BAAA,IAGAzC,KAAAU,gBAAAwB,OAAA,mDACAlC,KAAAS,QAAAiC,OAAA1C,KAAAU,iBAIAV,KAAAa,cAAAb,KAAAS,QAAAkC,KAAA,wCAEA,IAAA3C,KAAAa,cAAA+B,QACArB,QAAAC,IAAAlC,IAAA4B,KAAA2B,SAAA,cAAA,MAAA,+BACA7C,OAIAA,KAAAW,WAAAuB,OAAAxC,EAAAoD,KAAAC,IAAAjB,KAAA9B,KAAA,aACAC,WAAAD,KAAAC,WACAM,SAAAR,EAAAQ,SACAD,OAAAP,EAAAO,UAGAhB,IAAA4B,KAAAC,eACAe,OAAAc,SAAAC,MAAAP,OAAA1C,KAAAW,aAEAX,KAAAY,eAAAsB,OAAAxC,EAAAoD,KAAAC,IAAAjB,KAAA9B,KAAA,iBACAC,WAAAD,KAAAC,cAEAD,KAAAY,eAAA8B,OAAA1C,KAAAW,YACAuB,OAAAc,SAAAC,MAAAP,OAAA1C,KAAAY,iBAIAmB,EAAAD,KAAA9B,UAGAyB,GAAAK,KAAA9B,SApDAuB,QAAAC,IAAAlC,IAAA4B,KAAA2B,SAAA,cAAA,MAAA,SACA7C,OAwDAA,KAAAkD,KAAA,WACA7D,EAAA8D,kBAAA9D,EAAA8D,sBACA9D,EAAA8D,kBAAAC,KAAApD,MAEAqD,WAAA7D,EAAA8C,SAAAe,UAAA,KACArD,KAAAsD,UAAAD,UAAA,KAKAE,MAAAvD,KAAAqD,WAEA,OAAAvD,OAGAJ,EAAAJ,IAAAC,GAAAiE,YCrQA,WAEA,GAAA9D,GAAAJ,IAAAC,GAAAiE,SAEAC,EAAA,SAAAC,GACA,MAAA,cAIAC,EAAA,SAAAD,GACA,MAAA,wHAGAE,EAAA,SAAAF,GACA,MAAA,mGAGAhE,GAAAoD,MACAW,eAAAA,EACAE,UAAAA,EACAC,cAAAA,EAEAb,IAAA,SAAAc,EAAAxB,EAAAqB,GACA,MAAApE,KAAAwE,SAAAC,OAAArE,EAAAoD,KAAAe,GAAA/B,KAAA9B,KAAA0D,GAAArB","file":"ax5uploader.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.uploader\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var UPLOADER = void 0;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, function () {\n\n        var ax5uploader = function ax5uploader() {\n            var self = this,\n                cfg = void 0;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                accept: \"*/*\",\n                multiple: false\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            var onSelectFile = function onSelectFile(_evt) {\n                var files;\n\n                if (!ax5.info.supportFileApi) {\n                    // file API 지원 안되는 브라우저.\n                } else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                } else if ('target' in _evt) {\n                    files = _evt.target.files;\n                } else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                this.selectedFiles = files;\n\n                console.log(this.selectedFiles);\n            };\n\n            var upload = function upload() {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({ display: \"block\" });\n                progress_bar.css({ width: '0%' });\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                } else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({ width: U.number(e.loaded / e.total * 100, { round: 2 }) + '%' });\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({ display: \"none\" });\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData); // multipart/form-data\n            };\n\n            var bindEvent = function bindEvent() {\n                this.$fileSelector.off(\"click.ax5uploader\").on(\"click.ax5uploader\", function () {\n                    this.$inputFile.trigger(\"click\");\n                }.bind(this));\n\n                this.$inputFile.off(\"change.ax5uploader\").on(\"change.ax5uploader\", function (_evt) {\n                    onSelectFile.call(this, _evt);\n                }.bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this,\n                        timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n                }).call(this);\n            };\n\n            var alignLayout = function alignLayout() {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                var box = this.$fileSelector.position();\n                box.width = this.$fileSelector.outerWidth();\n                box.height = this.$fileSelector.outerHeight();\n                this.$inputFile.css(box);\n                */\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if (ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                } else {\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // align\n                alignLayout.call(this);\n\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    //this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5uploader;\n    }());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n\n// ax5.ui.uploader.tmpl\n(function () {\n\n    var UPLOADER = ax5.ui.uploader;\n\n    var uploadProgress = function uploadProgress(columnKeys) {\n        return \"\\n        \";\n    };\n\n    var inputFile = function inputFile(columnKeys) {\n        return \"<input type=\\\"file\\\" data-ax5uploader-input=\\\"{{instanceId}}\\\" {{#multiple}}multiple{{/multiple}} accept=\\\"{{accept}}\\\" />\";\n    };\n\n    var inputFileForm = function inputFileForm(columnKeys) {\n        return \"<form data-ax5uploader-form=\\\"{{instanceId}}\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"></form>\";\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.uploader\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let UPLOADER;\n\n    UI.addClass({\n        className: \"uploader\",\n        version: \"${VERSION}\"\n    }, (function () {\n\n        let ax5uploader = function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                accept: \"*/*\",\n                multiple: false\n            };\n\n            /// 업로드된 파일 큐\n            this.uploadedFiles = [];\n            /// 업로더 타겟\n            this.$target = null;\n            /// 업로드된 파일 정보들의 input 태그를 담아두는 컨테이너\n            this.$inputContainer = null;\n            /// input file 태그\n            this.$inputFile = null;\n            this.$inputFileForm = null;\n            /// 파일 선택버튼\n            this.$fileSelector = null;\n            /// 파일 드랍존\n            this.$dropZone = null;\n\n            cfg = this.config;\n\n            let onSelectFile = function (_evt) {\n                var files;\n\n                if(!ax5.info.supportFileApi){\n                    // file API 지원 안되는 브라우저.\n                }\n                else if ('dataTransfer' in _evt) {\n                    files = _evt.dataTransfer.files;\n                }\n                else if ('target' in _evt) {\n                    files = _evt.target.files;\n                }\n                else if (_evt) {\n                    files = _evt;\n                }\n\n                if (!files) return false;\n\n                /// selectedFiles에 현재 파일 정보 담아두기\n                this.selectedFiles = files;\n                \n                console.log(this.selectedFiles);\n            };\n\n            let upload = function () {\n                var _this = this;\n                if (!this.selected_file) {\n                    if (cfg.on_event) {\n                        var that = {\n                            action: \"error\",\n                            error: ax5.info.get_error(\"single-uploader\", \"460\", \"upload\")\n                        };\n                        cfg.on_event.call(that, that);\n                    }\n                    return this;\n                }\n\n                var formData = new FormData(),\n                    progress_bar = this.els[\"progress-bar\"];\n\n                this.els[\"progress\"].css({display: \"block\"});\n                progress_bar.css({width: '0%'});\n\n                if (window.imagePicker) {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                    // 다른 처리 방법 적용 필요\n                }\n                else {\n                    formData.append(cfg.upload_http.filename_param_key, this.selected_file);\n                }\n\n                for (var k in cfg.upload_http.data) {\n                    formData.append(k, cfg.upload_http.data[k]);\n                }\n\n                this.xhr = new XMLHttpRequest();\n                this.xhr.open(cfg.upload_http.method, cfg.upload_http.url, true);\n                this.xhr.onload = function (e) {\n                    var res = e.target.response;\n                    try {\n                        if (typeof res == \"string\") res = U.parseJson(res);\n                    } catch (e) {\n                        console.log(e);\n                        return false;\n                    }\n                    if (res.error) {\n                        console.log(res.error);\n                        return false;\n                    }\n                    _this.upload_complete(res);\n                };\n                this.xhr.upload.onprogress = function (e) {\n                    progress_bar.css({width: U.number((e.loaded / e.total) * 100, {round: 2}) + '%'});\n                    if (e.lengthComputable) {\n                        if (e.loaded >= e.total) {\n                            //_this.upload_complete();\n                            setTimeout(function () {\n                                _this.els[\"progress\"].css({display: \"none\"});\n                            }, 300);\n                        }\n                    }\n                };\n                this.xhr.send(formData);  // multipart/form-data\n            };\n\n            let bindEvent = function () {\n                this.$fileSelector\n                    .off(\"click.ax5uploader\")\n                    .on(\"click.ax5uploader\", (function () {\n                        this.$inputFile.trigger(\"click\");\n                    }).bind(this));\n\n                this.$inputFile\n                    .off(\"change.ax5uploader\")\n                    .on(\"change.ax5uploader\", (function (_evt) {\n                        onSelectFile.call(this, _evt);\n                    }).bind(this));\n\n                (function () {\n                    // dropZone 설정 방식 변경\n                    return false;\n                    var dragZone = this.els[\"container\"],\n                        preview_img = this.els[\"preview-img\"],\n                        _this = this, timer;\n\n                    dragZone.get(0).addEventListener('dragover', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        preview_img.hide();\n                        if (timer) clearTimeout(timer);\n\n                        dragZone.addClass(\"dragover\");\n                    }, false);\n                    dragZone.get(0).addEventListener('dragleave', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        if (timer) clearTimeout(timer);\n                        timer = setTimeout(function () {\n                            preview_img.show();\n                        }, 100);\n\n                        dragZone.removeClass(\"dragover\");\n                    }, false);\n\n                    dragZone.get(0).addEventListener('drop', function (e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        dragZone.removeClass(\"dragover\");\n                        _this.__on_select_file(e || window.event);\n                    }, false);\n\n                }).call(this);\n            };\n\n            let alignLayout = function () {\n                // 상황이 좋지 않은경우 (만약 버튼 클릭으로 input file click이 되지 않는 다면 z-index값을 높여서 버튼위를 덮는다.)\n                /*\n                var box = this.$fileSelector.position();\n                box.width = this.$fileSelector.outerWidth();\n                box.height = this.$fileSelector.outerHeight();\n                this.$inputFile.css(box);\n                */\n            };\n\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"401\", \"init\"));\n                    return this;\n                }\n\n                this.$target = jQuery(cfg.target);\n\n                // 파일 드랍존은 옵션 사항.\n                if (cfg.dropZone) {\n                    this.$dropZone = jQuery(cfg.dropZone);\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5uploader-config\"), true));\n\n                // input container 추가\n                this.$inputContainer = jQuery('<div data-ax5uploader-input-container=\"\"></div>');\n                this.$target.append(this.$inputContainer);\n\n                // detect element\n                /// fileSelector 수집\n                this.$fileSelector = this.$target.find('[data-ax5uploader-button=\"selector\"]');\n\n                if (this.$fileSelector.length === 0) {\n                    console.log(ax5.info.getError(\"ax5uploader\", \"402\", \"can not find file selector\"));\n                    return this;\n                }\n\n                // input file 추가\n                this.$inputFile = jQuery(UPLOADER.tmpl.get.call(this, \"inputFile\", {\n                    instanceId: this.instanceId,\n                    multiple: cfg.multiple,\n                    accept: cfg.accept\n                }));\n\n                if(ax5.info.supportFileApi) {\n                    jQuery(document.body).append(this.$inputFile);\n                }else{\n                    this.$inputFileForm = jQuery(UPLOADER.tmpl.get.call(this, \"inputFileForm\", {\n                        instanceId: this.instanceId\n                    }));\n                    this.$inputFileForm.append(this.$inputFile);\n                    jQuery(document.body).append(this.$inputFileForm);\n                }\n\n                // align\n                alignLayout.call(this);\n\n                // 파일버튼 등에 이벤트 연결.\n                bindEvent.call(this);\n\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.uploader_instance = UI.uploader_instance || [];\n                UI.uploader_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    //this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5uploader;\n    })());\n\n    UPLOADER = ax5.ui.uploader;\n})();\n","// ax5.ui.uploader.tmpl\n(function () {\n\n    let UPLOADER = ax5.ui.uploader;\n\n    let uploadProgress = function(columnKeys) {\n        return `\n        `;\n    };\n\n    let inputFile = function (columnKeys) {\n        return `<input type=\"file\" data-ax5uploader-input=\"{{instanceId}}\" {{#multiple}}multiple{{/multiple}} accept=\"{{accept}}\" />`;\n    };\n\n    let inputFileForm = function (columnKeys) {\n        return `<form data-ax5uploader-form=\"{{instanceId}}\" method=\"post\" enctype=\"multipart/form-data\"></form>`;\n    };\n\n    UPLOADER.tmpl = {\n        \"uploadProgress\": uploadProgress,\n        \"inputFile\": inputFile,\n        \"inputFileForm\": inputFileForm,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(UPLOADER.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}